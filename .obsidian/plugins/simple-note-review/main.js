/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/obsidian-dataview/lib/index.js
var require_lib = __commonJS({
  "node_modules/obsidian-dataview/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    require("obsidian");
    var getAPI3 = (app2) => {
      var _a;
      if (app2)
        return (_a = app2.plugins.plugins.dataview) === null || _a === void 0 ? void 0 : _a.api;
      else
        return window.DataviewAPI;
    };
    var isPluginEnabled = (app2) => app2.plugins.enabledPlugins.has("dataview");
    exports.getAPI = getAPI3;
    exports.isPluginEnabled = isPluginEnabled;
  }
});

// main.ts
__export(exports, {
  default: () => SimpleNoteReviewPlugin
});
var import_obsidian8 = __toModule(require("obsidian"));
var import_obsidian_dataview2 = __toModule(require_lib());

// src/noteSet/INoteSet.ts
var EmptyNoteSet = class {
  constructor(id) {
    this.id = id;
  }
};

// src/noteSet/noteSetService.ts
var import_obsidian = __toModule(require("obsidian"));

// src/dataview/dataviewFacade.ts
var import_obsidian_dataview = __toModule(require_lib());
var DataviewNotInstalledError = class extends Error {
  constructor() {
    super();
    this.message = "Dataview plugin not installed. To use Simple Note Review, Dataview plugin is needed.";
  }
};
var DataviewFacade = class {
  constructor() {
    this.isDataviewInstalled = false;
    try {
      this._api = (0, import_obsidian_dataview.getAPI)();
      if (this._api)
        this.isDataviewInstalled = true;
    } catch (error) {
      throw new DataviewNotInstalledError();
    }
  }
  pages(query) {
    return __async(this, null, function* () {
      return yield this.invokeAndReinitDvCacheOnError(() => this._api.pages(query));
    });
  }
  page(filepath) {
    return __async(this, null, function* () {
      return yield this.invokeAndReinitDvCacheOnError(() => this._api.page(filepath));
    });
  }
  getMetadataFieldValue(filepath, fieldName) {
    return __async(this, null, function* () {
      const page = yield this.page(filepath);
      return page[fieldName];
    });
  }
  invokeAndReinitDvCacheOnError(func, ...args) {
    return __async(this, null, function* () {
      try {
        if (!this.isDataviewInstalled)
          throw new DataviewNotInstalledError();
        return func(args);
      } catch (error) {
        yield this._api.index.reinitialize();
        return func(args);
      }
    });
  }
};

// src/utils/dateUtils.ts
function getDateOffsetByNDays(days) {
  const today = new Date();
  const offsetDate = new Date();
  offsetDate.setDate(today.getDate() - days);
  return offsetDate;
}
function getNumberOfDaysFromToday(datestring) {
  const date = new Date(datestring);
  const today = new Date();
  const diff = today.getTime() - date.getTime();
  return Math.round(diff / (1e3 * 60 * 60 * 24));
}
function getTodayAsYyyyMmDd() {
  const date = new Date();
  const year = date.toLocaleString("default", { year: "numeric" });
  const month = date.toLocaleString("default", { month: "2-digit" });
  const day = date.toLocaleString("default", { day: "2-digit" });
  return [year, month, day].join("-");
}

// src/dataview/dataviewService.ts
var DataviewService = class {
  constructor() {
    this._dataviewApi = new DataviewFacade();
  }
  getNoteSetFiles(noteSet) {
    return __async(this, null, function* () {
      const query = this.getOrCreateBaseDataviewQuery(noteSet);
      try {
        let pages = yield this._dataviewApi.pages(query);
        if (noteSet.createdInLastNDays) {
          pages = pages.where((p) => p.file.cday > getDateOffsetByNDays(noteSet.createdInLastNDays));
        }
        if (noteSet.modifiedInLastNDays) {
          pages = pages.where((p) => p.file.mday > getDateOffsetByNDays(noteSet.modifiedInLastNDays));
        }
        return pages;
      } catch (error) {
        if (error instanceof DataviewNotInstalledError) {
          throw error;
        } else {
          console.error(`Simple Note Review - dataview API error: ${error.message}`);
          throw new DataviewQueryError(`Error while trying to get next note in noteset "${query}" via Dataview API. Please check noteset settings and/or disabling and enabling Simple Note Review plugin again.`);
        }
      }
    });
  }
  getOrCreateBaseDataviewQuery(noteSet) {
    if (noteSet.dataviewQuery && noteSet.dataviewQuery != "")
      return noteSet.dataviewQuery;
    let tags = "";
    let folders = "";
    if (noteSet.tags) {
      tags = noteSet.tags.map((p) => {
        if (p[0] !== "#")
          return "#" + p;
        return p;
      }).join(` ${noteSet.tagsJoinType || "or"} `);
    }
    if (noteSet.folders) {
      folders = noteSet.folders.join(" or ");
    }
    if (tags && folders)
      return `(${tags}) ${noteSet.foldersToTagsJoinType || "or"} (${folders})`;
    if (tags)
      return tags;
    if (folders)
      return folders;
    return null;
  }
  getPageFromPath(filepath) {
    return this._dataviewApi.page(filepath);
  }
  getMetadataFieldValue(filepath, fieldName) {
    return __async(this, null, function* () {
      return yield this._dataviewApi.getMetadataFieldValue(filepath, fieldName);
    });
  }
};

// src/settings/joinLogicOperators.ts
var JoinLogicOperators;
(function(JoinLogicOperators2) {
  JoinLogicOperators2["AND"] = "and";
  JoinLogicOperators2["OR"] = "or";
})(JoinLogicOperators || (JoinLogicOperators = {}));

// src/noteSet/noteSetInfoService.ts
var NoteSetInfoService = class {
  constructor(_dataviewService) {
    this._dataviewService = _dataviewService;
  }
  updateNoteSetStats(noteSet) {
    return __async(this, null, function* () {
      const pages = yield this._dataviewService.getNoteSetFiles(noteSet);
      noteSet.stats = {
        totalCount: pages.length,
        notRewiewedCount: pages.where((p) => !p.reviewed).length,
        reviewedLastSevenDaysCount: pages.where((p) => p.reviewed > getDateOffsetByNDays(7)).length,
        reviewedLastThirtyDaysCount: pages.where((p) => p.reviewed > getDateOffsetByNDays(30)).length
      };
    });
  }
  updateNoteSetDisplayNameAndDescription(noteSet) {
    noteSet.displayName = this.getNoteSetDisplayName(noteSet);
    noteSet.description = this.getNoteSetDescription(noteSet);
  }
  getNoteSetDisplayName(noteSet) {
    if (noteSet.name && noteSet.name !== "") {
      return noteSet.name;
    }
    const alias = this._dataviewService.getOrCreateBaseDataviewQuery(noteSet);
    return alias && alias != "" ? alias : "blank note set";
  }
  getNoteSetDescription(noteSet) {
    var _a, _b, _c;
    if (this.queryMatchesAllNotes(noteSet)) {
      return "matches all notes";
    }
    let desc = [];
    if (noteSet.dataviewQuery && noteSet.dataviewQuery !== "") {
      desc.push(`are matched with dataviewJS query ${noteSet.dataviewQuery}; `);
    }
    if (noteSet.tags && ((_a = noteSet.tags) == null ? void 0 : _a.length) > 0) {
      let tagString = `contain ${noteSet.tagsJoinType === JoinLogicOperators.AND ? "all" : "any"} of these tags: ${noteSet.tags.join(", ")}`;
      if (noteSet.folders && ((_b = noteSet.folders) == null ? void 0 : _b.length) > 0) {
        tagString += ` ${noteSet.foldersToTagsJoinType === JoinLogicOperators.AND ? "and" : "or"} `;
      }
      desc.push(tagString);
    }
    if (noteSet.folders && ((_c = noteSet.folders) == null ? void 0 : _c.length) > 0) {
      desc.push(`are inside any of these folders (including nested folders): ${noteSet.folders.join(", ")}`);
    }
    if (noteSet.createdInLastNDays) {
      desc.push(`are created in the last ${noteSet.createdInLastNDays} days`);
    }
    if (noteSet.modifiedInLastNDays) {
      desc.push(`are modified in the last ${noteSet.modifiedInLastNDays} days`);
    }
    return `matches notes that:  ` + desc.join("; ");
  }
  queryMatchesAllNotes(noteset) {
    return !(this._dataviewService.getOrCreateBaseDataviewQuery(noteset) || noteset.createdInLastNDays || noteset.createdInLastNDays);
  }
};

// src/utils/metadataService.ts
var FRONTMATTER_REGEX = /^---\r?\n((?:.*\r?\n)+?)---/;
var FIELDS_REGEX_PART = "((?:.*\n)*)";
var MetadataService = class {
  constructor(app2) {
    this.app = app2;
  }
  setAndSaveMetadataFieldsValue(file = null, fields) {
    return __async(this, null, function* () {
      const fileContent = yield app.vault.read(file);
      let newFileContent = fileContent;
      for (const field of fields) {
        newFileContent = this.setMetadataFieldValue(newFileContent, field);
      }
      yield this.app.vault.modify(file, newFileContent);
    });
  }
  setAndSaveMetadataFieldValue(file = null, field) {
    return __async(this, null, function* () {
      this.setAndSaveMetadataFieldsValue(file, [field]);
    });
  }
  setMetadataFieldValue(fileContent, data) {
    const fieldText = `${data.name}: ${data.value}
`;
    let newFileContent;
    const fieldRegex = this.createFieldRegex(data.name);
    if (fieldRegex.test(fileContent)) {
      const result = fieldRegex.exec(fileContent);
      const partBefore = result[1];
      const partAfter = result[3];
      newFileContent = fileContent.replace(fieldRegex, `---
${partBefore}${fieldText}${partAfter}---`);
    } else if (FRONTMATTER_REGEX.test(fileContent)) {
      const metadata = FRONTMATTER_REGEX.exec(fileContent);
      const partBefore = metadata[1];
      newFileContent = fileContent.replace(FRONTMATTER_REGEX, `---
${partBefore}${fieldText}---`);
    } else {
      newFileContent = `---
${fieldText}---

${fileContent}`;
    }
    return newFileContent;
  }
  createSingleFieldRegexString(fieldName) {
    return `(${fieldName}s*:s*.*
)`;
  }
  createFieldRegex(fieldName) {
    return new RegExp(`---
(?:${FIELDS_REGEX_PART}${this.createSingleFieldRegexString(fieldName)}${FIELDS_REGEX_PART})---`);
  }
};

// src/noteSet/reviewFrequency.ts
var ReviewFrequency;
(function(ReviewFrequency2) {
  ReviewFrequency2["high"] = "high";
  ReviewFrequency2["normal"] = "normal";
  ReviewFrequency2["low"] = "low";
  ReviewFrequency2["ignore"] = "ignore";
})(ReviewFrequency || (ReviewFrequency = {}));

// src/noteSet/noteReviewPriorityHelpers.ts
function calculateNoteReviewPriority(plugin, note) {
  const reviewedFieldName = plugin.settings.reviewedFieldName;
  const frequencyFieldName = plugin.settings.reviewFrequencyFieldName;
  let score = 0;
  switch (note[frequencyFieldName]) {
    case ReviewFrequency.high:
      score = 5;
      break;
    case null:
    case "":
    case void 0:
      score = 4;
      break;
    case ReviewFrequency.normal:
      score = 3;
      break;
    case ReviewFrequency.low:
      score = 2;
      break;
    case ReviewFrequency.ignore:
      score = 0;
      return score;
    default:
      throw new Error("Review Frequency error!");
  }
  let multiplier = 1;
  if (note[reviewedFieldName] == null || note[reviewedFieldName] == "" || note[reviewedFieldName] == void 0)
    multiplier = plugin.settings.unreviewedNotesFirst ? 1e4 : 300;
  else
    multiplier = getNumberOfDaysFromToday(note[reviewedFieldName]);
  return score ** 2 * multiplier;
}

// src/settings/reviewAlgorightms.ts
var ReviewAlgorithm;
(function(ReviewAlgorithm2) {
  ReviewAlgorithm2["default"] = "default";
  ReviewAlgorithm2["random"] = "random";
})(ReviewAlgorithm || (ReviewAlgorithm = {}));

// src/noteSet/noteSetService.ts
var NoteSetEmptyError = class extends Error {
  constructor() {
    super(...arguments);
    this.message = "Could not get the next note in note set. Please check note set settings and make sure it has notes.";
  }
};
var OpenNextFileInNoteSetError = class extends Error {
  constructor() {
    super(...arguments);
    this.message = "Could not open next note in note set. If this keeps happening, please try to disable and enable plugin. If that fails, try to restart Obsidian.";
  }
};
var DataviewQueryError = class extends Error {
};
var NoteSetService = class {
  constructor(_app, _plugin) {
    this._app = _app;
    this._plugin = _plugin;
    this._dataviewService = new DataviewService();
    this._noteSetInfoService = new NoteSetInfoService(this._dataviewService);
    this._metadataService = new MetadataService(this._app);
  }
  addEmptyNoteSet() {
    return __async(this, null, function* () {
      this._plugin.settings.noteSets.push(new EmptyNoteSet(this._plugin.settings.noteSets.length > 0 ? Math.max(...this._plugin.settings.noteSets.map((q) => q.id)) + 1 : 1));
      yield this._plugin.saveSettings();
    });
  }
  deleteNoteSet(noteSet) {
    return __async(this, null, function* () {
      this._plugin.settings.noteSets = this._plugin.settings.noteSets.filter((q) => q.id !== noteSet.id);
      yield this._plugin.saveSettings();
    });
  }
  updateNoteSetDisplayNames() {
    this._plugin.settings.noteSets.forEach((q) => this.updateNoteSetDisplayNameAndDescription(q));
  }
  updateNoteSetDisplayNameAndDescription(noteSet) {
    this._noteSetInfoService.updateNoteSetDisplayNameAndDescription(noteSet);
  }
  updateNoteSetStats(noteSet) {
    this._noteSetInfoService.updateNoteSetStats(noteSet);
  }
  reviewNote(_0) {
    return __async(this, arguments, function* (note, noteSet = this._plugin.settings.currentNoteSet) {
      if (!(note instanceof import_obsidian.TFile))
        return;
      try {
        yield this.setReviewedToToday(note);
      } catch (error) {
        this._plugin.showNotice(error.message);
      }
      if (this._plugin.settings.openNextNoteAfterReviewing) {
        yield this.openNextFile(noteSet);
      }
    });
  }
  startReview(noteSet) {
    return __async(this, null, function* () {
      this.openNextFile(noteSet);
    });
  }
  openNextFile(noteSet) {
    return __async(this, null, function* () {
      const filePath = yield this.getNextFilePath(noteSet);
      const abstractFile = this._app.vault.getAbstractFileByPath(filePath);
      yield this._app.workspace.getLeaf().openFile(abstractFile);
    });
  }
  openRandomFile(noteSet) {
    return __async(this, null, function* () {
      const filePath = yield this.getNextFilePath(noteSet, ReviewAlgorithm.random);
      const abstractFile = this._app.vault.getAbstractFileByPath(filePath);
      yield this._app.workspace.getLeaf().openFile(abstractFile);
    });
  }
  setReviewFrequency(note, frequency) {
    return __async(this, null, function* () {
      if (!(note instanceof import_obsidian.TFile))
        return;
      try {
        yield this._metadataService.setAndSaveMetadataFieldValue(note, {
          name: this._plugin.settings.reviewFrequencyFieldName,
          value: frequency
        });
      } catch (error) {
        this._plugin.showNotice(error.message);
        throw error;
      }
    });
  }
  setReviewedToToday(file) {
    return __async(this, null, function* () {
      const todayString = getTodayAsYyyyMmDd();
      const fieldsToSet = [{
        name: this._plugin.settings.reviewedFieldName,
        value: todayString
      }];
      if (this._plugin.settings.useReviewFrequency) {
        const reviewFrequency = yield this.getReviewFrequency(file);
        fieldsToSet.push({
          name: this._plugin.settings.reviewFrequencyFieldName,
          value: reviewFrequency != null ? reviewFrequency : ReviewFrequency.normal
        });
      }
      yield this._metadataService.setAndSaveMetadataFieldsValue(file, fieldsToSet);
      this._plugin.showNotice(`Marked note "${file.path}" as reviewed today.`);
    });
  }
  getReviewFrequency(file) {
    return __async(this, null, function* () {
      const frequencyValue = yield this._dataviewService.getMetadataFieldValue(file.path, this._plugin.settings.reviewFrequencyFieldName);
      switch (frequencyValue) {
        case ReviewFrequency.high:
          return ReviewFrequency.high;
        case ReviewFrequency.normal:
          return ReviewFrequency.normal;
        case ReviewFrequency.low:
          return ReviewFrequency.low;
        case ReviewFrequency.ignore:
          return ReviewFrequency.ignore;
        default:
          return null;
      }
    });
  }
  getNextFilePath(_0) {
    return __async(this, arguments, function* (noteSet, reviewAlgorithm = this._plugin.settings.reviewAlgorithm) {
      var _a, _b, _c, _d;
      const reviewedFieldName = this._plugin.settings.reviewedFieldName;
      const freqFieldname = this._plugin.settings.reviewFrequencyFieldName;
      const pages = (yield this._dataviewService.getNoteSetFiles(noteSet)).filter((x) => x[freqFieldname] !== ReviewFrequency.ignore);
      let sorted;
      if (this._plugin.settings.useReviewFrequency) {
        sorted = pages.sort((x) => calculateNoteReviewPriority(this._plugin, x), "desc");
      } else {
        sorted = pages.sort((x) => x[reviewedFieldName], "asc");
      }
      if (sorted.length > 0) {
        let firstNoteIndex;
        switch (reviewAlgorithm) {
          case ReviewAlgorithm.random:
            firstNoteIndex = ~~(Math.random() * sorted.length);
            break;
          case ReviewAlgorithm.default:
          default:
            firstNoteIndex = 0;
            break;
        }
        const firstInNoteSetPath = (_b = (_a = sorted[firstNoteIndex]) == null ? void 0 : _a.file) == null ? void 0 : _b.path;
        if (!firstInNoteSetPath)
          throw new OpenNextFileInNoteSetError();
        if (sorted.length === 1) {
          return firstInNoteSetPath;
        }
        const nextInnoteSetPath = (_d = (_c = sorted[1]) == null ? void 0 : _c.file) == null ? void 0 : _d.path;
        return this.pathEqualsCurrentFilePath(firstInNoteSetPath) ? nextInnoteSetPath : firstInNoteSetPath;
      }
      throw new NoteSetEmptyError();
    });
  }
  pathEqualsCurrentFilePath(path) {
    var _a;
    return path === ((_a = this._app.workspace.getActiveFile()) == null ? void 0 : _a.path);
  }
};

// src/UI/selectNoteSetModal.ts
var import_obsidian2 = __toModule(require("obsidian"));
var SelectNoteSetModal = class extends import_obsidian2.SuggestModal {
  constructor(_app, _plugin) {
    super(_app);
    this._app = _app;
    this._plugin = _plugin;
  }
  getSuggestions(query) {
    this.setPlaceholder("Select a note set to start reviewing notes");
    return this._plugin.settings.noteSets.filter((q) => {
      if (query === "") {
        return true;
      }
      const name = q.displayName;
      if (!name || name === "") {
        return false;
      }
      return name.toLowerCase().includes(query.toLowerCase());
    });
  }
  renderSuggestion(noteSet, el) {
    el.createDiv({ text: noteSet.displayName });
    el.createEl("small", { text: noteSet.description }).style.opacity = "60%";
  }
  onChooseSuggestion(noteSet, evt) {
    return __async(this, null, function* () {
      try {
        this._plugin.settings.currentNoteSet = noteSet;
        this._plugin.saveSettings();
        this._plugin.showNotice(`Set current note set to ${noteSet.displayName}.`);
        yield this._plugin.service.openNextFile(noteSet);
      } catch (error) {
        console.error(error.message);
        this._plugin.showNotice(error.message);
        this.open();
      }
    });
  }
};

// src/settings/pluginSettings.ts
var DefaultSettings = class {
  constructor() {
    this.reviewedFieldName = "reviewed";
    this.reviewFrequencyFieldName = "review-frequency";
    this.noteSets = [];
    this.currentNoteSet = null;
    this.openNextNoteAfterReviewing = true;
    this.openRandomNote = false;
    this.useReviewFrequency = false;
    this.unreviewedNotesFirst = false;
  }
};

// src/UI/settingsTab.ts
var import_obsidian6 = __toModule(require("obsidian"));

// src/UI/noteset/noteSetDeleteModal.ts
var import_obsidian3 = __toModule(require("obsidian"));
var NoteSetDeleteModal = class extends import_obsidian3.Modal {
  constructor(app2, settingsTab, noteSet, service) {
    super(app2);
    this.settingsTab = settingsTab;
    this.noteSet = noteSet;
    this.service = service;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.addClass("note-set-delete-modal");
    contentEl.setText(`Delete note set "${this.noteSet.displayName}" ?`);
    const btnsDiv = contentEl.createDiv();
    const okBtn = btnsDiv.createEl("button", { text: "Ok" });
    okBtn.onClickEvent(() => __async(this, null, function* () {
      yield this.service.deleteNoteSet(this.noteSet);
      this.settingsTab.refresh();
      this.close();
    }));
    const cancelBtn = btnsDiv.createEl("button", { text: "Cancel" });
    cancelBtn.onClickEvent(() => this.close());
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/UI/noteset/noteSetInfoModal.ts
var import_obsidian4 = __toModule(require("obsidian"));
var NoteSetInfoModal = class extends import_obsidian4.Modal {
  constructor(app2, noteSet, service) {
    super(app2);
    this.noteSet = noteSet;
    this.service = service;
  }
  onOpen() {
    this.service.updateNoteSetDisplayNameAndDescription(this.noteSet);
    this.service.updateNoteSetStats(this.noteSet);
    const { contentEl } = this;
    contentEl.createEl("h3", { text: `Note set "${this.noteSet.displayName}"` });
    contentEl.createDiv({ text: `This query ${this.noteSet.description}.` });
    contentEl.createEl("br");
    contentEl.createEl("p", { text: `Total notes: ${this.noteSet.stats.totalCount}` });
    contentEl.createEl("p", { text: `Reviewed in last 7 days: ${this.noteSet.stats.reviewedLastSevenDaysCount}` });
    contentEl.createEl("p", { text: `Reviewed in last 30 days: ${this.noteSet.stats.reviewedLastThirtyDaysCount}` });
    contentEl.createEl("p", { text: `Not reviewed yet: ${this.noteSet.stats.notRewiewedCount}` });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/UI/noteset/noteSetEditModal.ts
var import_obsidian5 = __toModule(require("obsidian"));
var NoteSetEditModal = class extends import_obsidian5.Modal {
  constructor(_noteSet, _plugin) {
    super(app);
    this._noteSet = _noteSet;
    this._plugin = _plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: `Note set "${this._noteSet.displayName}"` });
    const nameSetting = new import_obsidian5.Setting(contentEl);
    nameSetting.setName("Name");
    nameSetting.setDesc("If omitted, the name will be created from tags, folders, or dataviewJS query (if these are set).");
    nameSetting.addText((textField) => {
      textField.setValue(this._noteSet.name).setPlaceholder(this._noteSet.displayName).onChange((value) => {
        if (value === this._noteSet.name) {
          return;
        }
        this._noteSet.name = value != "" ? value : null;
        if (value == "") {
          textField.setPlaceholder(this._noteSet.displayName);
        }
      });
    });
    const tagsSetting = new import_obsidian5.Setting(contentEl);
    tagsSetting.setName("Tags");
    tagsSetting.setDesc(`One or more tags, separated by comma. Note set will contain notes tagged with ${this._noteSet.tagsJoinType === JoinLogicOperators.AND ? "all" : "any"} of these. Example: #review, #knowledge`);
    tagsSetting.addTextArea((textArea) => {
      textArea.setValue(this._noteSet.tags ? this._noteSet.tags.join(",") : "").setPlaceholder("Tags").onChange((value) => {
        this._noteSet.tags = value != "" ? value.split(",").map((f) => f.trim()) : [];
      });
    });
    const foldersSetting = new import_obsidian5.Setting(contentEl);
    foldersSetting.setName("Folders");
    foldersSetting.setDesc(`One or more folder paths relative to vault root, surrounded by quotes and separated by comma. Note set will contain notes located in any of these. Top-level folders must not contain slash in their path.  Example: "notes", "notes/programming"`);
    foldersSetting.addTextArea((textArea) => {
      textArea.setValue(this._noteSet.folders ? this._noteSet.folders.join(",") : "").setPlaceholder("Folders").onChange((value) => {
        this._noteSet.folders = value != "" ? value.split(",").map((f) => f.trim()) : [];
      });
    });
    const createdDateSetting = new import_obsidian5.Setting(contentEl);
    createdDateSetting.setName("Created in last N days");
    createdDateSetting.setDesc(`Number of days`);
    createdDateSetting.addText((text) => {
      text.inputEl.type = "number";
      text.setValue(`${this._noteSet.createdInLastNDays}`);
      text.onChange((val) => __async(this, null, function* () {
        this._noteSet.createdInLastNDays = parseInt(val);
      }));
    });
    const modifiedDateSetting = new import_obsidian5.Setting(contentEl);
    modifiedDateSetting.setName("Modified in last N days");
    modifiedDateSetting.setDesc(`Number of days`);
    modifiedDateSetting.addText((text) => {
      text.inputEl.type = "number";
      text.setValue(`${this._noteSet.modifiedInLastNDays}`);
      text.onChange((val) => __async(this, null, function* () {
        this._noteSet.modifiedInLastNDays = parseInt(val);
      }));
    });
    const advancedSectionHeader = new import_obsidian5.Setting(contentEl);
    advancedSectionHeader.setHeading();
    advancedSectionHeader.setName("Advanced Settings");
    const advancedSectionBodyEl = contentEl.createDiv({ cls: ["setting-body-advanced", "is-collapsed"] });
    const tagJoinTypeSetting = new import_obsidian5.Setting(advancedSectionBodyEl);
    tagJoinTypeSetting.setName("If tags are specified, match notes with:");
    tagJoinTypeSetting.addDropdown((dropdown) => {
      dropdown.addOption(JoinLogicOperators.OR, "any of the tags").addOption(JoinLogicOperators.AND, "all of the tags").setValue(this._noteSet.tagsJoinType || JoinLogicOperators.OR).onChange((value) => {
        this._noteSet.tagsJoinType = value;
      });
    });
    const folderTagJoinTypeSetting = new import_obsidian5.Setting(advancedSectionBodyEl);
    folderTagJoinTypeSetting.setName("If folders *and* tags are specified, match notes with: ");
    folderTagJoinTypeSetting.addDropdown((dropdown) => {
      dropdown.addOption(JoinLogicOperators.OR, "specified tags OR in these folders").addOption(JoinLogicOperators.AND, "specified tags AND in these folders").setValue(this._noteSet.foldersToTagsJoinType || JoinLogicOperators.OR).onChange((value) => {
        this._noteSet.foldersToTagsJoinType = value;
      });
    });
    const dataviewQuerySetting = new import_obsidian5.Setting(advancedSectionBodyEl);
    dataviewQuerySetting.setName("DataviewJS query");
    dataviewQuerySetting.setDesc(`DataviewJS-style query for more flexible control over the note set. If used, *overrides* Tags & Folders. Example: "(#knowledge and #review) or ('./notes')"`);
    dataviewQuerySetting.addTextArea((textArea) => {
      textArea.setValue(this._noteSet.dataviewQuery).setPlaceholder("DataviewJS query").onChange((value) => {
        this._noteSet.dataviewQuery = value;
        updateTagsFoldersSettingsAvailability(value);
      });
    });
    const saveBtn = new import_obsidian5.ButtonComponent(contentEl);
    saveBtn.setButtonText("Save");
    saveBtn.onClick(() => __async(this, null, function* () {
      return yield this.save();
    }));
    const updateTagsFoldersSettingsAvailability = (dataviewJsQueryValue) => {
      const disableTagsFoldersSettings = dataviewJsQueryValue && dataviewJsQueryValue != "";
      if (disableTagsFoldersSettings) {
        tagsSetting.settingEl.style.opacity = "50%";
        foldersSetting.settingEl.style.opacity = "50%";
      } else {
        tagsSetting.settingEl.style.opacity = "100%";
        foldersSetting.settingEl.style.opacity = "100%";
      }
      tagsSetting.setDisabled(disableTagsFoldersSettings);
      foldersSetting.setDisabled(disableTagsFoldersSettings);
    };
    updateTagsFoldersSettingsAvailability(this._noteSet.dataviewQuery);
  }
  save() {
    return __async(this, null, function* () {
      this._plugin.settings.noteSets.forEach((noteSet, index) => {
        if (noteSet.id == this._noteSet.id) {
          this._plugin.settings.noteSets[index] = this._noteSet;
        }
      });
      this._plugin.service.updateNoteSetDisplayNameAndDescription(this._noteSet);
      this._plugin.service.updateNoteSetStats(this._noteSet);
      yield this._plugin.saveSettings();
      yield this._plugin.activateView();
      this._plugin.showNotice(`Note set "${this._noteSet.displayName}" saved.`);
      this.close();
    });
  }
};

// src/UI/settingsTab.ts
var SimpleNoteReviewPluginSettingsTab = class extends import_obsidian6.PluginSettingTab {
  constructor(_plugin, app2) {
    super(app2, _plugin);
    this._plugin = _plugin;
  }
  refresh() {
    this.display();
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Simple Note Review Settings" });
    new import_obsidian6.Setting(containerEl).setName("Open next note in the note set after reviewing a note").setDesc("After marking note as reviewed, automatically open next note in the note set.").addToggle((toggle) => {
      toggle.setValue(this._plugin.settings.openNextNoteAfterReviewing).onChange((value) => {
        this._plugin.settings.openNextNoteAfterReviewing = value;
        this._plugin.saveSettings();
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Use review frequency").setDesc("Set review frequency level (high, normal, low, ignore) for each note. Notes with higher review frequency will be presented for review more often. Default is 'normal'.").addToggle((toggle) => {
      toggle.setValue(this._plugin.settings.useReviewFrequency).onChange((value) => {
        this._plugin.settings.useReviewFrequency = value;
        this._plugin.saveSettings();
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Start with unreviewed notes").setDesc("Start review with notes that have no review date. If turned off, notes without the review date will have lower priority than notes with early review dates.").addToggle((toggle) => {
      toggle.setValue(this._plugin.settings.unreviewedNotesFirst).onChange((value) => {
        this._plugin.settings.unreviewedNotesFirst = value;
        this._plugin.saveSettings();
      });
    });
    containerEl.createEl("h3", { text: "Note Sets" });
    this._plugin.settings && this._plugin.settings.noteSets && this._plugin.settings.noteSets.forEach((noteSet) => {
      this._plugin.service.updateNoteSetDisplayNameAndDescription(noteSet);
      this._plugin.service.updateNoteSetStats(noteSet);
      const setting = new import_obsidian6.Setting(containerEl);
      setting.setName(`Note Set "${noteSet.displayName}"`);
      const updateHeader = (text) => {
        setting.setName(`Note Set "${text}"`);
      };
      updateHeader(noteSet.displayName);
      setting.addExtraButton((cb) => {
        cb.setIcon("info").setTooltip("Note set info & stats").onClick(() => {
          new NoteSetInfoModal(this.app, noteSet, this._plugin.service).open();
        });
      });
      setting.addExtraButton((cb) => {
        cb.setIcon("edit").setTooltip("Edit Note set").onClick(() => {
          var modal = new NoteSetEditModal(noteSet, this._plugin);
          modal.open();
          modal.onClose = () => {
            this.refresh();
          };
        });
      });
      setting.addExtraButton((cb) => {
        cb.setIcon("trash").setTooltip("Delete note set").onClick(() => __async(this, null, function* () {
          new NoteSetDeleteModal(this.app, this, noteSet, this._plugin.service).open();
        }));
      });
    });
    new import_obsidian6.Setting(containerEl).addButton((btn) => {
      btn.setButtonText("Add Note Set");
      btn.onClick(() => __async(this, null, function* () {
        yield this._plugin.service.addEmptyNoteSet();
        this.refresh();
      }));
    });
  }
};

// src/UI/sidebar/sidebarView.ts
var import_obsidian7 = __toModule(require("obsidian"));
var _SimpleNoteReviewSidebarView = class extends import_obsidian7.ItemView {
  constructor(leaf, _plugin) {
    super(leaf);
    this._plugin = _plugin;
  }
  onOpen() {
    return __async(this, null, function* () {
      yield this.renderView();
    });
  }
  onClose() {
    return __async(this, null, function* () {
    });
  }
  renderView() {
    return __async(this, null, function* () {
      this.contentEl.empty();
      this.createGeneralActionsEl(this.contentEl);
      this.createCurrentFileActionsEl(this.contentEl);
      this.contentEl.createEl("h4", { text: "Note Sets" });
      this._plugin.settings.noteSets.forEach((noteSet) => {
        this.createNotesetSection(noteSet);
      });
    });
  }
  createGeneralActionsEl(parentEl) {
    var actionsEl = new import_obsidian7.Setting(parentEl);
    actionsEl.setDesc("general actions:");
    actionsEl.addExtraButton((cb) => {
      cb.setIcon("refresh-cw").setTooltip("refresh sidebar").onClick(() => __async(this, null, function* () {
        yield this.renderView();
      }));
    });
    actionsEl.addExtraButton((cb) => {
      cb.setIcon("settings").setTooltip("open settings").onClick(() => {
        this.app.setting.open();
        this.app.setting.openTabById("simple-note-review");
      });
    });
    return actionsEl.settingEl;
  }
  createCurrentFileActionsEl(parentEl) {
    var actionsEl = new import_obsidian7.Setting(parentEl);
    actionsEl.setDesc("current file actions:");
    actionsEl.addExtraButton((cb) => {
      cb.setIcon("slash").setTooltip("exclude file from review").onClick(() => {
        this._plugin.service.setReviewFrequency(this.app.workspace.getActiveFile(), ReviewFrequency.ignore);
      });
    });
    actionsEl.addExtraButton((cb) => {
      cb.setIcon("signal-low").setTooltip("set review frequency to low").onClick(() => {
        this._plugin.service.setReviewFrequency(this.app.workspace.getActiveFile(), ReviewFrequency.low);
      });
    });
    actionsEl.addExtraButton((cb) => {
      cb.setIcon("signal-medium").setTooltip("set review frequency to normal").onClick(() => {
        this._plugin.service.setReviewFrequency(this.app.workspace.getActiveFile(), ReviewFrequency.normal);
      });
    });
    actionsEl.addExtraButton((cb) => {
      cb.setIcon("signal").setTooltip("set review frequency to high").onClick(() => {
        this._plugin.service.setReviewFrequency(this.app.workspace.getActiveFile(), ReviewFrequency.high);
      });
    });
    actionsEl.addExtraButton((cb) => {
      cb.setIcon("file-check").setTooltip("mark note as reviewed & go to the next file").onClick(() => {
        this._plugin.service.reviewNote(this.app.workspace.getActiveFile(), this._plugin.settings.currentNoteSet);
      });
    });
    return actionsEl.settingEl;
  }
  createNotesetSection(noteSet) {
    var _a;
    const section = new import_obsidian7.Setting(this.contentEl);
    const trimmedName = noteSet.displayName.length > 20 ? noteSet.displayName.substring(0, 20) + "..." : noteSet.displayName;
    section.setName(trimmedName);
    if (this._plugin.settings.currentNoteSet && this._plugin.settings.currentNoteSet.id === noteSet.id) {
      section.setDesc("current note set");
    } else {
      section.setDesc("");
    }
    this._plugin.service.updateNoteSetStats(noteSet);
    if (!((_a = noteSet == null ? void 0 : noteSet.stats) == null ? void 0 : _a.totalCount) || noteSet.stats.totalCount === 0) {
      section.addExtraButton((cb) => {
        cb.setIcon("alert-triangle").setTooltip("this note set is empty. you may want to adjust settings.");
      });
    }
    section.addExtraButton((cb) => {
      cb.setIcon("info").setTooltip("view note set info & stats").onClick(() => {
        new NoteSetInfoModal(this.app, noteSet, this._plugin.service).open();
      });
    });
    section.addExtraButton((cb) => {
      cb.setIcon("edit").setTooltip("edit note set").onClick(() => {
        new NoteSetEditModal(noteSet, this._plugin).open();
      });
    });
    section.addExtraButton((cb) => {
      cb.setIcon("dices").setTooltip("open random note from this note set").onClick(() => __async(this, null, function* () {
        this._plugin.settings.currentNoteSet = noteSet;
        yield this._plugin.saveSettings();
        this._plugin.showNotice(`Set current note set to ${noteSet.displayName}.`);
        this._plugin.service.openRandomFile(this._plugin.settings.currentNoteSet);
        this._plugin.activateView();
      }));
    });
    section.addExtraButton((cb) => {
      cb.setIcon("play").setTooltip("start reviewing this note set").onClick(() => __async(this, null, function* () {
        this._plugin.settings.currentNoteSet = noteSet;
        yield this._plugin.saveSettings();
        this._plugin.showNotice(`Set current note set to ${noteSet.displayName}.`);
        this._plugin.service.startReview(this._plugin.settings.currentNoteSet);
        this._plugin.activateView();
      }));
    });
    return section.settingEl;
  }
  getViewType() {
    return _SimpleNoteReviewSidebarView.VIEW_TYPE;
  }
  getDisplayText() {
    return _SimpleNoteReviewSidebarView.DISPLAY_TEXT;
  }
  getIcon() {
    return _SimpleNoteReviewSidebarView.SNR_ICON_NAME;
  }
};
var SimpleNoteReviewSidebarView = _SimpleNoteReviewSidebarView;
SimpleNoteReviewSidebarView.VIEW_TYPE = "simple-note-review-sidebar-view";
SimpleNoteReviewSidebarView.DISPLAY_TEXT = "Simple Note Review";
SimpleNoteReviewSidebarView.SNR_ICON_NAME = "glasses";

// main.ts
var SimpleNoteReviewPlugin = class extends import_obsidian8.Plugin {
  constructor() {
    super(...arguments);
    this.service = new NoteSetService(this.app, this);
    this.openModalIconName = "glasses";
    this.markAsReviewedIconName = "checkmark";
  }
  onload() {
    return __async(this, null, function* () {
      this.app.workspace.onLayoutReady(() => {
        if (!this.dataviewIsInstalled()) {
          this.showNotice("Could not find Dataview plugin. To use Simple Note Review plugin, please install Dataview plugin first.");
        }
      });
      yield this.loadSettings();
      this.service.updateNoteSetDisplayNames();
      this.registerView(SimpleNoteReviewSidebarView.VIEW_TYPE, (leaf) => new SimpleNoteReviewSidebarView(leaf, this));
      this.addRibbonIcon(this.openModalIconName, "Simple Note Review: Open Sidebar View", (evt) => {
        this.activateView();
      });
      this.addRibbonIcon("play-circle", "Simple Note Review: Start Reviewing", (evt) => {
        this.startReview();
      });
      this.addCommands();
      this.registerEvent(this.app.workspace.on("editor-menu", (menu, editor, view) => {
        menu.addItem((item) => {
          item.setTitle("Mark Note As Reviewed Today").setIcon(this.markAsReviewedIconName).onClick(() => __async(this, null, function* () {
            yield this.service.reviewNote(view.file);
          }));
        });
      }));
      this.registerEvent(this.app.workspace.on("file-menu", (menu, file) => {
        menu.addItem((item) => {
          item.setTitle("Mark Note As Reviewed Today").setIcon(this.markAsReviewedIconName).onClick(() => __async(this, null, function* () {
            yield this.service.reviewNote(file);
          }));
        });
      }));
      this.addSettingTab(new SimpleNoteReviewPluginSettingsTab(this, this.app));
    });
  }
  onunload() {
  }
  startReview() {
    return __async(this, null, function* () {
      let currentNoteSet = this.settings.currentNoteSet;
      if (!currentNoteSet) {
        new SelectNoteSetModal(this.app, this).open();
        return;
      }
      this.showNotice(`Reviewing note set "${this.settings.currentNoteSet.displayName}"`);
      this.service.openNextFile(currentNoteSet);
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, new DefaultSettings(), yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  showNotice(message) {
    new import_obsidian8.Notice(message);
  }
  dataviewIsInstalled() {
    return !!(0, import_obsidian_dataview2.getAPI)();
  }
  addCommands() {
    this.addCommand({
      id: "start-review",
      name: "Start reviewing notes",
      callback: () => {
        this.startReview();
      }
    });
    this.addCommand({
      id: "continue-review",
      name: "Continue reviewing notes",
      callback: () => {
        this.startReview();
      }
    });
    this.addCommand({
      id: "open-toolbar",
      name: "Open Sidebar View",
      callback: () => {
        this.activateView();
      }
    });
    this.addCommand({
      id: "open-random-note",
      name: "Open random note from the current note set",
      callback: () => {
        this.service.openRandomFile(this.settings.currentNoteSet);
      }
    });
    this.addCommand({
      id: "open-modal",
      name: "Select Note Set For Reviewing",
      callback: () => {
        new SelectNoteSetModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "set-reviewed-date",
      name: "Mark Note As Reviewed Today",
      callback: () => {
        this.service.reviewNote(this.app.workspace.getActiveFile(), this.settings.currentNoteSet);
      }
    });
    this.addCommand({
      id: "set-review-frequency-high",
      name: "Set review frequency to high",
      callback: () => {
        this.service.setReviewFrequency(this.app.workspace.getActiveFile(), ReviewFrequency.high);
      }
    });
    this.addCommand({
      id: "set-review-frequency-normal",
      name: "Set review frequency to normal",
      callback: () => {
        this.service.setReviewFrequency(this.app.workspace.getActiveFile(), ReviewFrequency.normal);
      }
    });
    this.addCommand({
      id: "set-review-frequency-low",
      name: "Set review frequency to low",
      callback: () => {
        this.service.setReviewFrequency(this.app.workspace.getActiveFile(), ReviewFrequency.low);
      }
    });
    this.addCommand({
      id: "set-review-frequency-ignore",
      name: "Set review frequency to none (ignore this note)",
      callback: () => {
        this.service.setReviewFrequency(this.app.workspace.getActiveFile(), ReviewFrequency.ignore);
      }
    });
  }
  activateView() {
    return __async(this, null, function* () {
      this.app.workspace.detachLeavesOfType(SimpleNoteReviewSidebarView.VIEW_TYPE);
      yield this.app.workspace.getRightLeaf(false).setViewState({
        type: SimpleNoteReviewSidebarView.VIEW_TYPE,
        active: true
      });
      this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(SimpleNoteReviewSidebarView.VIEW_TYPE)[0]);
    });
  }
};

/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping,
// which, as a code snippet, is in the public domain, per 
// https://developer.mozilla.org/en-US/docs/MDN/About#copyrights_and_licenses
// (as of 2021-07-15):
function escapeRegExp(string) {
    // $& means the whole matched string:
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
const toggleQuote = (view, prefix) => __awaiter(void 0, void 0, void 0, function* () {
    const editor = view.editor;
    const escapedPrefix = escapeRegExp(prefix);
    const currentSelectionStart = editor.getCursor('from');
    const currentSelectionEnd = editor.getCursor('to');
    const replacementRange = [
        { line: currentSelectionStart.line, ch: 0 },
        {
            line: currentSelectionEnd.line,
            ch: editor.getLine(currentSelectionEnd.line).length
        }
    ];
    const fullSelectedLines = editor.getRange(replacementRange[0], replacementRange[1]).split('\n');
    const leadingWhitespaces = fullSelectedLines.map((e) => {
        const whitespaceMatch = e.match(new RegExp(`^(\\s*)`));
        return whitespaceMatch !== null ? whitespaceMatch[1] : '';
    });
    // This is in its own variable to aid in debugging:
    let filteredLeadingWhitespaces = leadingWhitespaces
        .filter((e, i) => {
        // Get rid of blank lines, which might be part of multi-line
        // passages:
        return fullSelectedLines[i] !== '';
    });
    // Account for if all lines actually *are* unindented, and we thus
    // filtered all lines out immediately above:
    const filteredLeadingLengths = (filteredLeadingWhitespaces.length > 0 ?
        filteredLeadingWhitespaces :
        [''])
        .map((e) => e.length);
    const minLeadingWhitespaceLength = Math.min(...filteredLeadingLengths);
    // Determine whether *every* line is Prefixed or not. If not, we will
    // add the prefix to every line; if so, we will remove it from every line.
    const isEveryLinePrefixed = fullSelectedLines.every((e) => {
        const prefixMatch = e.match(new RegExp(`^\\s{${minLeadingWhitespaceLength}}${escapedPrefix}`));
        if (prefixMatch !== null) {
            return true;
        }
        return false;
    });
    // Make an educated guess about using tabs vs spaces (lacking access to the
    // "Use Tabs" setting value in Obsidian for now) by just repurposing the
    // first actual instance of leading whitespace:
    const exampleLeadingWhitespace = leadingWhitespaces
        .filter(e => e.length === minLeadingWhitespaceLength);
    // Update the text in-place:
    for (const [i, text] of fullSelectedLines.entries()) {
        if (isEveryLinePrefixed === true) {
            if (text === '') {
                fullSelectedLines[i] = exampleLeadingWhitespace.length > 0 ?
                    exampleLeadingWhitespace[0] :
                    ' '.repeat(minLeadingWhitespaceLength);
                continue;
            }
            fullSelectedLines[i] = text.replace(new RegExp(`^(\\s{${minLeadingWhitespaceLength}})${escapedPrefix}`), '$1');
            continue;
        }
        if (text === '') {
            fullSelectedLines[i] = (exampleLeadingWhitespace.length > 0 ?
                exampleLeadingWhitespace[0] :
                ' '.repeat(minLeadingWhitespaceLength)) + prefix;
            continue;
        }
        // If the prefix is already in the correct place, do not add to it:
        if (!text.match(new RegExp(`^\\s{${minLeadingWhitespaceLength}}${escapedPrefix}`))) {
            fullSelectedLines[i] = text.replace(new RegExp(`^(\\s{${minLeadingWhitespaceLength}})`), `$1${prefix}`);
        }
    }
    editor.replaceRange(fullSelectedLines.join('\n'), replacementRange[0], replacementRange[1]);
    let newSelectionStartCh;
    if (currentSelectionStart.ch < minLeadingWhitespaceLength) {
        newSelectionStartCh = currentSelectionStart.ch;
    }
    else {
        if (isEveryLinePrefixed) {
            newSelectionStartCh = currentSelectionStart.ch - prefix.length;
        }
        else {
            newSelectionStartCh = currentSelectionStart.ch + prefix.length;
        }
    }
    let newSelectionEndCh;
    if (currentSelectionEnd.ch < minLeadingWhitespaceLength) {
        newSelectionEndCh = currentSelectionEnd.ch;
    }
    else {
        if (isEveryLinePrefixed) {
            newSelectionEndCh = currentSelectionEnd.ch - prefix.length;
        }
        else {
            newSelectionEndCh = currentSelectionEnd.ch + prefix.length;
        }
    }
    editor.setSelection({
        line: currentSelectionStart.line,
        ch: newSelectionStartCh
    }, {
        line: currentSelectionEnd.line,
        ch: newSelectionEndCh
    });
    return;
});

const pasteText = (view, prefix = '') => __awaiter(void 0, void 0, void 0, function* () {
    const editor = view.editor;
    const clipboardText = yield navigator.clipboard.readText();
    if (clipboardText !== '') {
        const currentCursor = editor.getCursor();
        const currentLineText = editor.getLine(currentCursor.line);
        const leadingWhitespace = currentLineText.match(/^(\s*).*/)[1];
        const clipboardTextIndented = clipboardText.replaceAll(/\n/g, '\n' + leadingWhitespace + prefix);
        const replacementText = prefix +
            clipboardTextIndented;
        editor.replaceSelection(replacementText);
        return;
    }
    new obsidian.Notice('The clipboard is currently empty.');
});

const pasteHTMLBlockquoteText = (view) => __awaiter(void 0, void 0, void 0, function* () {
    const editor = view.editor;
    const clipboardText = yield navigator.clipboard.readText();
    if (clipboardText !== "") {
        const currentCursor = editor.getCursor();
        const currentLineText = editor.getLine(currentCursor.line);
        const leadingWhitespace = currentLineText.match(/^(\s*).*/)[1];
        const padding = '  ';
        const clipboardTextIndented = clipboardText.replaceAll(/\n/g, `\n${leadingWhitespace}${padding}`).replace(/(\n\s*)*$/, '');
        const replacementText = `<blockquote>\n${leadingWhitespace}${padding}` +
            clipboardTextIndented +
            `\n${leadingWhitespace}<blockquote>`;
        editor.replaceSelection(replacementText);
        return;
    }
    new obsidian.Notice("The clipboard is currently empty.");
});

const DEFAULT_SETTINGS = {
    blockquotePrefix: '> '
};
class PastetoIndentationPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new SettingTab(this.app, this));
            this.addCommand({
                id: 'paste-text-to-current-indentation',
                name: 'Paste text to current indentation',
                checkCallback: (checking) => {
                    let view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    if (view) {
                        if (!checking) {
                            pasteText(view);
                        }
                        return true;
                    }
                    return false;
                }
            });
            this.addCommand({
                id: 'paste-blockquote-to-current-indentation',
                name: 'Paste blockquote to current indentation',
                checkCallback: (checking) => {
                    let view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    if (view) {
                        if (!checking && view instanceof obsidian.MarkdownView) {
                            pasteText(view, this.settings.blockquotePrefix);
                        }
                        return true;
                    }
                    return false;
                }
            });
            this.addCommand({
                id: "paste-html-wrapped-blockquote",
                name: "Paste HTML-wrapped blockquote to current indentation",
                checkCallback: (checking) => {
                    let view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    if (view) {
                        if (!checking && view instanceof obsidian.MarkdownView) {
                            pasteHTMLBlockquoteText(view);
                        }
                        return true;
                    }
                    return false;
                },
            });
            this.addCommand({
                id: 'toggle-blockquote-at-current-indentation',
                name: 'Toggle blockquote at current indentation',
                checkCallback: (checking) => {
                    let view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    if (view) {
                        if (!checking && view instanceof obsidian.MarkdownView) {
                            toggleQuote(view, this.settings.blockquotePrefix);
                        }
                        return true;
                    }
                    return false;
                }
            });
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class SettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Paste to Current Indentation' });
        new obsidian.Setting(containerEl)
            .setName('Blockquote Prefix')
            .setDesc('Markdown syntax to signify that a line is part of a blockquote.')
            .addText(text => text
            .setPlaceholder('>•')
            .setValue(this.plugin.settings.blockquotePrefix === DEFAULT_SETTINGS.blockquotePrefix ?
            '' :
            this.plugin.settings.blockquotePrefix)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.blockquotePrefix = value !== ''
                ? value :
                DEFAULT_SETTINGS.blockquotePrefix;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = PastetoIndentationPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

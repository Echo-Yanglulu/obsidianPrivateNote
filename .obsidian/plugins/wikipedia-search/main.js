/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WikipediaSearch
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/search.ts
var import_obsidian2 = require("obsidian");

// src/languages.ts
var languages = {
  aa: "Qaf\xE1r af",
  ab: "\u0430\u0525\u0441\u0448\u04D9\u0430",
  ace: "Ac\xE8h",
  ady: "\u0430\u0434\u044B\u0433\u0430\u0431\u0437\u044D",
  af: "Afrikaans",
  ak: "Akan",
  als: "Alemannisch",
  alt: "\u0430\u043B\u0442\u0430\u0439 \u0442\u0438\u043B",
  am: "\u12A0\u121B\u122D\u129B",
  ami: "Pangcah",
  an: "aragon\xE9s",
  ang: "\xC6nglisc",
  ar: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629",
  arc: "\u0710\u072A\u0721\u071D\u0710",
  ary: "\u0627\u0644\u062F\u0627\u0631\u062C\u0629",
  arz: "\u0645\u0635\u0631\u0649",
  as: "\u0985\u09B8\u09AE\u09C0\u09AF\u09BC\u09BE",
  ast: "asturianu",
  atj: "Atikamekw",
  av: "\u0430\u0432\u0430\u0440",
  avk: "Kotava",
  awa: "\u0905\u0935\u0927\u0940",
  ay: "Aymar aru",
  az: "az\u0259rbaycanca",
  azb: "\u062A\u06C6\u0631\u06A9\u062C\u0647",
  ba: "\u0431\u0430\u0448\u04A1\u043E\u0440\u0442\u0441\u0430",
  ban: "Basa Bali",
  bar: "Boarisch",
  "bat-smg": "\u017Eemait\u0117\u0161ka",
  bcl: "Bikol Central",
  be: "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F",
  "be-tarask": "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F (\u0442\u0430\u0440\u0430\u0448\u043A\u0435\u0432\u0456\u0446\u0430)",
  "be-x-old": "\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F (\u0442\u0430\u0440\u0430\u0448\u043A\u0435\u0432\u0456\u0446\u0430)",
  bg: "\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438",
  bh: "\u092D\u094B\u091C\u092A\u0941\u0930\u0940",
  bi: "Bislama",
  bjn: "Banjar",
  blk: "\u1015\u1021\u102D\u102F\u101D\u103A\u108F\u1018\u102C\u108F\u101E\u102C\u108F",
  bm: "bamanankan",
  bn: "\u09AC\u09BE\u0982\u09B2\u09BE",
  bo: "\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42",
  bpy: "\u09AC\u09BF\u09B7\u09CD\u09A3\u09C1\u09AA\u09CD\u09B0\u09BF\u09AF\u09BC\u09BE \u09AE\u09A3\u09BF\u09AA\u09C1\u09B0\u09C0",
  br: "brezhoneg",
  bs: "bosanski",
  bug: "\u1A05\u1A14 \u1A15\u1A18\u1A01\u1A17",
  bxr: "\u0431\u0443\u0440\u044F\u0430\u0434",
  ca: "catal\xE0",
  "cbk-zam": "Chavacano de Zamboanga",
  cdo: "\u95A9\u6771\u8A9E / M\xECng-d\u0115\u0324ng-ng\u1E73\u0304",
  ce: "\u043D\u043E\u0445\u0447\u0438\u0439\u043D",
  ceb: "Cebuano",
  ch: "Chamoru",
  cho: "Chahta Anumpa",
  chr: "\u13E3\u13B3\u13A9",
  chy: "Tsets\xEAhest\xE2hese",
  ckb: "\u06A9\u0648\u0631\u062F\u06CC",
  co: "corsu",
  cr: "N\u0113hiyaw\u0113win / \u14C0\u1426\u1403\u152D\u140D\u140F\u1423",
  crh: "q\u0131r\u0131mtatarca",
  cs: "\u010De\u0161tina",
  csb: "kasz\xEBbsczi",
  cu: "\u0441\u043B\u043E\u0432\u0463\u043D\u044C\u0441\u043A\u044A / \u2C14\u2C0E\u2C11\u2C02\u2C21\u2C10\u2C20\u2C14\u2C0D\u2C1F",
  cv: "\u0447\u04D1\u0432\u0430\u0448\u043B\u0430",
  cy: "Cymraeg",
  da: "dansk",
  dag: "dagbanli",
  de: "Deutsch",
  din: "Thu\u0254\u014Bj\xE4\u014B",
  diq: "Zazaki",
  dsb: "dolnoserbski",
  dty: "\u0921\u094B\u091F\u0947\u0932\u0940",
  dv: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0",
  dz: "\u0F47\u0F7C\u0F44\u0F0B\u0F41",
  ee: "e\u028Begbe",
  el: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC",
  eml: "emili\xE0n e rumagn\xF2l",
  en: "English",
  eo: "Esperanto",
  es: "espa\xF1ol",
  et: "eesti",
  eu: "euskara",
  ext: "estreme\xF1u",
  fa: "\u0641\u0627\u0631\u0633\u06CC",
  ff: "Fulfulde",
  fi: "suomi",
  "fiu-vro": "v\xF5ro",
  fj: "Na Vosa Vakaviti",
  fo: "f\xF8royskt",
  fr: "fran\xE7ais",
  frp: "arpetan",
  frr: "Nordfriisk",
  fur: "furlan",
  fy: "Frysk",
  ga: "Gaeilge",
  gag: "Gagauz",
  gan: "\u8D1B\u8A9E",
  gcr: "kriy\xF2l gwiyannen",
  gd: "G\xE0idhlig",
  gl: "galego",
  glk: "\u06AF\u06CC\u0644\u06A9\u06CC",
  gn: "Ava\xF1e'\u1EBD",
  gom: "\u0917\u094B\u0902\u092F\u091A\u0940 \u0915\u094B\u0902\u0915\u0923\u0940 / G\xF5ychi Konknni",
  gor: "Bahasa Hulontalo",
  got: "\u{10332}\u{1033F}\u{10344}\u{10339}\u{10343}\u{1033A}",
  gu: "\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0",
  guc: "wayuunaiki",
  gur: "farefare",
  guw: "gungbe",
  gv: "Gaelg",
  ha: "Hausa",
  hak: "\u5BA2\u5BB6\u8A9E/Hak-k\xE2-ng\xEE",
  haw: "Hawai\u02BBi",
  he: "\u05E2\u05D1\u05E8\u05D9\u05EA",
  hi: "\u0939\u093F\u0928\u094D\u0926\u0940",
  hif: "Fiji Hindi",
  ho: "Hiri Motu",
  hr: "hrvatski",
  hsb: "hornjoserbsce",
  ht: "Krey\xF2l ayisyen",
  hu: "magyar",
  hy: "\u0570\u0561\u0575\u0565\u0580\u0565\u0576",
  hyw: "\u0531\u0580\u0565\u0582\u0574\u057F\u0561\u0570\u0561\u0575\u0565\u0580\u0567\u0576",
  hz: "Otsiherero",
  ia: "interlingua",
  id: "Bahasa Indonesia",
  ie: "Interlingue",
  ig: "Igbo",
  ii: "\uA187\uA259",
  ik: "I\xF1upiatun",
  ilo: "Ilokano",
  inh: "\u0433\u04C0\u0430\u043B\u0433\u04C0\u0430\u0439",
  io: "Ido",
  is: "\xEDslenska",
  it: "italiano",
  iu: "\u1403\u14C4\u1483\u144E\u1450\u1466 / inuktitut",
  ja: "\u65E5\u672C\u8A9E",
  jam: "Patois",
  jbo: "la .lojban.",
  jv: "Jawa",
  ka: "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8",
  kaa: "Qaraqalpaqsha",
  kab: "Taqbaylit",
  kbd: "\u0430\u0434\u044B\u0433\u044D\u0431\u0437\u044D",
  kbp: "Kab\u0269y\u025B",
  kcg: "Tyap",
  kg: "Kongo",
  ki: "G\u0129k\u0169y\u0169",
  kj: "Kwanyama",
  kk: "\u049B\u0430\u0437\u0430\u049B\u0448\u0430",
  kl: "kalaallisut",
  km: "\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A",
  kn: "\u0C95\u0CA8\u0CCD\u0CA8\u0CA1",
  ko: "\uD55C\uAD6D\uC5B4",
  koi: "\u043F\u0435\u0440\u0435\u043C \u043A\u043E\u043C\u0438",
  kr: "kanuri",
  krc: "\u043A\u044A\u0430\u0440\u0430\u0447\u0430\u0439-\u043C\u0430\u043B\u043A\u044A\u0430\u0440",
  ks: "\u0915\u0949\u0936\u0941\u0930 / \u06A9\u0672\u0634\u064F\u0631",
  ksh: "Ripoarisch",
  ku: "kurd\xEE",
  kv: "\u043A\u043E\u043C\u0438",
  kw: "kernowek",
  ky: "\u043A\u044B\u0440\u0433\u044B\u0437\u0447\u0430",
  la: "Latina",
  lad: "Ladino",
  lb: "L\xEBtzebuergesch",
  lbe: "\u043B\u0430\u043A\u043A\u0443",
  lez: "\u043B\u0435\u0437\u0433\u0438",
  lfn: "Lingua Franca Nova",
  lg: "Luganda",
  li: "Limburgs",
  lij: "Ligure",
  lld: "Ladin",
  lmo: "lombard",
  ln: "ling\xE1la",
  lo: "\u0EA5\u0EB2\u0EA7",
  lrc: "\u0644\u06CA\u0631\u06CC \u0634\u0648\u0645\u0627\u0644\u06CC",
  lt: "lietuvi\u0173",
  ltg: "latga\u013Cu",
  lv: "latvie\u0161u",
  mad: "Madhur\xE2",
  mai: "\u092E\u0948\u0925\u093F\u0932\u0940",
  "map-bms": "Basa Banyumasan",
  mdf: "\u043C\u043E\u043A\u0448\u0435\u043D\u044C",
  mg: "Malagasy",
  mh: "Ebon",
  mhr: "\u043E\u043B\u044B\u043A \u043C\u0430\u0440\u0438\u0439",
  mi: "M\u0101ori",
  min: "Minangkabau",
  mk: "\u043C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438",
  ml: "\u0D2E\u0D32\u0D2F\u0D3E\u0D33\u0D02",
  mn: "\u043C\u043E\u043D\u0433\u043E\u043B",
  mni: "\uABC3\uABE4\uABC7\uABE9 \uABC2\uABE3\uABDF",
  mnw: "\u1018\u102C\u101E\u102C \u1019\u1014\u103A",
  mo: "\u043C\u043E\u043B\u0434\u043E\u0432\u0435\u043D\u044F\u0441\u043A\u044D",
  mr: "\u092E\u0930\u093E\u0920\u0940",
  mrj: "\u043A\u044B\u0440\u044B\u043A \u043C\u0430\u0440\u044B",
  ms: "Bahasa Melayu",
  mt: "Malti",
  mus: "Mvskoke",
  mwl: "Mirand\xE9s",
  my: "\u1019\u103C\u1014\u103A\u1019\u102C\u1018\u102C\u101E\u102C",
  myv: "\u044D\u0440\u0437\u044F\u043D\u044C",
  mzn: "\u0645\u0627\u0632\u0650\u0631\u0648\u0646\u06CC",
  na: "Dorerin Naoero",
  nah: "N\u0101huatl",
  nap: "Napulitano",
  nds: "Plattd\xFC\xFCtsch",
  "nds-nl": "Nedersaksies",
  ne: "\u0928\u0947\u092A\u093E\u0932\u0940",
  new: "\u0928\u0947\u092A\u093E\u0932 \u092D\u093E\u0937\u093E",
  ng: "Oshiwambo",
  nia: "Li Niha",
  nl: "Nederlands",
  nn: "norsk nynorsk",
  no: "norsk",
  nov: "Novial",
  nqo: "\u07D2\u07DE\u07CF",
  nrm: "Nouormand",
  nso: "Sesotho sa Leboa",
  nv: "Din\xE9 bizaad",
  ny: "Chi-Chewa",
  oc: "occitan",
  olo: "livvinkarjala",
  om: "Oromoo",
  or: "\u0B13\u0B21\u0B3C\u0B3F\u0B06",
  os: "\u0438\u0440\u043E\u043D",
  pa: "\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40",
  pag: "Pangasinan",
  pam: "Kapampangan",
  pap: "Papiamentu",
  pcd: "Picard",
  pcm: "Naij\xE1",
  pdc: "Deitsch",
  pfl: "P\xE4lzisch",
  pi: "\u092A\u093E\u0932\u093F",
  pih: "Norfuk / Pitkern",
  pl: "polski",
  pms: "Piemont\xE8is",
  pnb: "\u067E\u0646\u062C\u0627\u0628\u06CC",
  pnt: "\u03A0\u03BF\u03BD\u03C4\u03B9\u03B1\u03BA\u03AC",
  ps: "\u067E\u069A\u062A\u0648",
  pt: "portugu\xEAs",
  pwn: "pinayuanan",
  qu: "Runa Simi",
  rm: "rumantsch",
  rmy: "romani \u010Dhib",
  rn: "ikirundi",
  ro: "rom\xE2n\u0103",
  "roa-rup": "arm\xE3neashti",
  "roa-tara": "tarand\xEDne",
  ru: "\u0440\u0443\u0441\u0441\u043A\u0438\u0439",
  rue: "\u0440\u0443\u0441\u0438\u043D\u044C\u0441\u043A\u044B\u0439",
  rw: "Ikinyarwanda",
  sa: "\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D",
  sah: "\u0441\u0430\u0445\u0430 \u0442\u044B\u043B\u0430",
  sat: "\u1C65\u1C5F\u1C71\u1C5B\u1C5F\u1C72\u1C64",
  sc: "sardu",
  scn: "sicilianu",
  sco: "Scots",
  sd: "\u0633\u0646\u068C\u064A",
  se: "davvis\xE1megiella",
  sg: "S\xE4ng\xF6",
  sh: "srpskohrvatski / \u0441\u0440\u043F\u0441\u043A\u043E\u0445\u0440\u0432\u0430\u0442\u0441\u043A\u0438",
  shi: "Tacl\u1E25it",
  shn: "\u107D\u1083\u1087\u101E\u1083\u1087\u1010\u1086\u1038 ",
  shy: "tacawit",
  si: "\u0DC3\u0DD2\u0D82\u0DC4\u0DBD",
  simple: "Simple English",
  sk: "sloven\u010Dina",
  skr: "\u0633\u0631\u0627\u0626\u06CC\u06A9\u06CC",
  sl: "sloven\u0161\u010Dina",
  sm: "Gagana Samoa",
  smn: "anar\xE2\u0161kiel\xE2",
  sn: "chiShona",
  so: "Soomaaliga",
  sq: "shqip",
  sr: "\u0441\u0440\u043F\u0441\u043A\u0438 / srpski",
  srn: "Sranantongo",
  ss: "SiSwati",
  st: "Sesotho",
  stq: "Seeltersk",
  su: "Sunda",
  sv: "svenska",
  sw: "Kiswahili",
  szl: "\u015Bl\u016Fnski",
  szy: "Sakizaya",
  ta: "\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD",
  tay: "Tayal",
  tcy: "\u0CA4\u0CC1\u0CB3\u0CC1",
  te: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41",
  tet: "tetun",
  tg: "\u0442\u043E\u04B7\u0438\u043A\u04E3",
  th: "\u0E44\u0E17\u0E22",
  ti: "\u1275\u130D\u122D\u129B",
  tk: "T\xFCrkmen\xE7e",
  tl: "Tagalog",
  tn: "Setswana",
  to: "lea faka-Tonga",
  tpi: "Tok Pisin",
  tr: "T\xFCrk\xE7e",
  trv: "Seediq",
  ts: "Xitsonga",
  tt: "\u0442\u0430\u0442\u0430\u0440\u0447\u0430 / tatar\xE7a",
  tum: "chiTumbuka",
  tw: "Twi",
  ty: "reo tahiti",
  tyv: "\u0442\u044B\u0432\u0430 \u0434\u044B\u043B",
  udm: "\u0443\u0434\u043C\u0443\u0440\u0442",
  ug: "\u0626\u06C7\u064A\u063A\u06C7\u0631\u0686\u06D5 / Uyghurche",
  uk: "\u0443\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430",
  ur: "\u0627\u0631\u062F\u0648",
  uz: "o\u02BBzbekcha / \u045E\u0437\u0431\u0435\u043A\u0447\u0430",
  ve: "Tshivenda",
  vec: "v\xE8neto",
  vep: "veps\xE4n kel\u2019",
  vi: "Ti\u1EBFng Vi\u1EC7t",
  vls: "West-Vlams",
  vo: "Volap\xFCk",
  wa: "walon",
  war: "Winaray",
  wo: "Wolof",
  wuu: "\u5434\u8BED",
  xal: "\u0445\u0430\u043B\u044C\u043C\u0433",
  xh: "isiXhosa",
  xmf: "\u10DB\u10D0\u10E0\u10D2\u10D0\u10DA\u10E3\u10E0\u10D8",
  yi: "\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9",
  yo: "Yor\xF9b\xE1",
  yue: "\u7CB5\u8A9E",
  za: "Vahcuengh",
  zea: "Ze\xEAuws",
  zh: "\u4E2D\u6587",
  "zh-classical": "\u6587\u8A00",
  "zh-min-nan": "B\xE2n-l\xE2m-g\xFA",
  "zh-yue": "\u7CB5\u8A9E",
  zu: "isiZulu"
};

// src/wikipediaAPI.ts
var import_obsidian = require("obsidian");
async function getArticles(query, languageCode) {
  var _a;
  const response = (_a = await (0, import_obsidian.requestUrl)(getAPIBaseURL(languageCode) + `&action=opensearch&profile=fuzzy&search=${query}`).catch(
    (e) => {
      console.error(e);
      return null;
    }
  )) == null ? void 0 : _a.json;
  if (!response)
    return null;
  return response[1].map((title, index) => ({ title, url: response[3][index] }));
}
async function getArticleDescriptions(titles, languageCode) {
  var _a;
  const response = (_a = await (0, import_obsidian.requestUrl)(
    getAPIBaseURL(languageCode) + `&action=query&prop=description&titles=${encodeURIComponent(titles.join("|"))}`
  ).catch((e) => {
    console.error(e);
    return null;
  })) == null ? void 0 : _a.json;
  if (!response)
    return null;
  if (!response.query)
    return [];
  return Object.values(response.query.pages).sort((a, b) => titles.indexOf(a.title) - titles.indexOf(b.title)).map((page) => {
    var _a2;
    return (_a2 = page.description) != null ? _a2 : null;
  });
}
async function getArticleExtracts(titles, languageCode) {
  var _a;
  const response = (_a = await (0, import_obsidian.requestUrl)(
    getAPIBaseURL(languageCode) + `&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=${encodeURIComponent(
      titles.join("|")
    )}`
  ).catch((e) => {
    console.error(e);
    return null;
  })) == null ? void 0 : _a.json;
  if (!response)
    return null;
  if (!response.query)
    return [];
  return Object.values(response.query.pages).sort((a, b) => titles.indexOf(a.title) - titles.indexOf(b.title)).map((page) => {
    var _a2;
    return (_a2 = page.extract) != null ? _a2 : null;
  });
}
function getAPIBaseURL(languageCode) {
  return `https://${languageCode}.wikipedia.org/w/api.php?format=json`;
}

// src/search.ts
var SearchModal = class extends import_obsidian2.SuggestModal {
  constructor(app2, plugin, editor) {
    super(app2);
    __publicField(this, "plugin");
    __publicField(this, "editor");
    this.plugin = plugin;
    this.editor = editor;
    this.setPlaceholder("Search Wikipedia...");
  }
  onOpen() {
    this.inputEl.value = this.editor.getSelection();
    super.updateSuggestions();
  }
  renderSuggestion(article, el) {
    el.createEl("div", { text: article.title });
    el.createEl("small", {
      text: article.description || article.url.slice(8)
    });
  }
  async getSuggestions(query) {
    var _a, _b, _c;
    if (!window.navigator.onLine) {
      this.emptyStateText = "You have to be connected to the internet to search!";
      return [];
    }
    let languageCode = this.plugin.settings.language;
    const queryArgs = query.split(":", 2);
    if (queryArgs.length > 1) {
      const queryCode = (_a = queryArgs[0]) == null ? void 0 : _a.trim();
      const queryText = (_b = queryArgs[1]) == null ? void 0 : _b.trim();
      if (queryCode && Object.keys(languages).includes(queryCode) && queryCode !== languageCode) {
        languageCode = queryCode;
        query = queryText;
      }
    }
    if (query.trim() === "") {
      this.emptyStateText = "What are you waiting for? Start typing :)";
      return [];
    }
    this.emptyStateText = "No results found.";
    const searchResponses = await getArticles(query, languageCode);
    const descriptions = await getArticleDescriptions(
      (_c = searchResponses == null ? void 0 : searchResponses.map((a) => a.title)) != null ? _c : [],
      languageCode
    );
    if (!searchResponses || !descriptions) {
      this.emptyStateText = "An error occurred... Go check the logs and open a bug report!";
      return [];
    }
    if (this.plugin.settings.autoInsertSingleResponseQueries && searchResponses.length === 1) {
      this.close();
      this.onChooseSuggestion({
        title: searchResponses[0].title,
        url: searchResponses[0].url,
        description: descriptions[0],
        languageCode
      });
    }
    return searchResponses.map((article, index) => ({
      title: article.title,
      url: article.url,
      description: descriptions[index],
      languageCode
    }));
  }
  async onChooseSuggestion(article) {
    if (this.plugin.settings.additionalTemplatesEnabled) {
      new TemplateModal(app, this.plugin, this.editor, article).open();
    } else {
      insert(this.editor, this.plugin.settings, article, this.plugin.settings.defaultTemplate);
    }
  }
};
var TemplateModal = class extends import_obsidian2.SuggestModal {
  constructor(app2, plugin, editor, article) {
    super(app2);
    __publicField(this, "plugin");
    __publicField(this, "editor");
    __publicField(this, "article");
    this.plugin = plugin;
    this.editor = editor;
    this.article = article;
    this.setPlaceholder("Pick a template...");
  }
  renderSuggestion(template, el) {
    el.createEl("div", { text: template.name });
    el.createEl("small", {
      text: template.templateString
    });
  }
  async getSuggestions(query) {
    return [{ name: "Default", templateString: this.plugin.settings.defaultTemplate }].concat(this.plugin.settings.templates).filter((template) => template.name.toLowerCase().includes(query.toLowerCase()));
  }
  async onChooseSuggestion(template) {
    insert(this.editor, this.plugin.settings, this.article, template.templateString);
  }
};
async function insert(editor, settings, article, templateString) {
  var _a, _b;
  const cursorPosition = editor.getCursor();
  let extract = templateString.includes("{extract}") ? (_b = (_a = await getArticleExtracts([article.title], settings.language)) == null ? void 0 : _a[0]) != null ? _b : null : null;
  const selection = editor.getSelection();
  const insert2 = templateString.replaceAll("{title}", settings.alwaysUseArticleTitle || selection === "" ? article.title : selection).replaceAll("{url}", article.url).replaceAll("{language}", languages[article.languageCode]).replaceAll("{languageCode}", article.languageCode).replaceAll("{extract}", extract != null ? extract : "[Could not fetch the extract...]");
  editor.replaceSelection(insert2);
  if (settings.placeCursorInfrontOfInsert)
    editor.setCursor(cursorPosition);
}

// src/settings.ts
var import_obsidian3 = require("obsidian");
var DEFAULT_SETTINGS = {
  language: "en",
  defaultTemplate: "[{title}]({url})",
  placeCursorInfrontOfInsert: false,
  autoInsertSingleResponseQueries: false,
  alwaysUseArticleTitle: false,
  additionalTemplatesEnabled: false,
  templates: []
};
var WikipediaSearchSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    __publicField(this, "plugin");
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    const settings = this.plugin.settings;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Wikipedia Search Settings" });
    containerEl.createEl("h2", { text: "General" });
    new import_obsidian3.Setting(containerEl).setName("Language").setDesc("Default Wikipedia to search in. (type to search)").addDropdown(
      (dropdown) => dropdown.addOptions(
        Object.entries(languages).reduce(
          (pre, lang) => ({
            ...pre,
            [lang[0]]: `${lang[0]} - ${lang[1]}`
          }),
          {}
        )
      ).setValue(settings.language).onChange(async (value) => {
        settings.language = value;
        await this.plugin.saveSettings();
        new import_obsidian3.Notice(`Language set to ${languages[value]} (${value})!`);
      })
    );
    new import_obsidian3.Setting(containerEl).setName(`${settings.additionalTemplatesEnabled ? "Default " : ""}Template`).setDesc(
      "Template for the insert. (all occurrences of '{title}', '{url}', '{language}', '{languageCode}' and '{extract}' will be replaced with the selection/articles title, URL, language, language code and extract respectively)"
    ).addTextArea(
      (text) => text.setPlaceholder("Template").setValue(settings.defaultTemplate).onChange(async (value) => {
        settings.defaultTemplate = value;
        await this.plugin.saveSettings();
      })
    );
    if (settings.additionalTemplatesEnabled) {
      containerEl.createEl("h2", { text: "Additional Templates" });
      new import_obsidian3.Setting(containerEl).setName("Add Template").setDesc("Adds a new template option to choose from.").addButton(
        (button) => button.setIcon("plus").onClick(async () => {
          if (settings.templates.length == 20)
            return new import_obsidian3.Notice(
              "Easy buddy... I need to stop you right there. You can only have up to 20 additional templates. It's for your own good!"
            );
          settings.templates.push({
            name: `Template #${settings.templates.length + 1}`,
            templateString: DEFAULT_SETTINGS.defaultTemplate
          });
          await this.plugin.saveSettings();
          this.display();
        })
      );
      for (const [i, val] of settings.templates.entries()) {
        new import_obsidian3.Setting(containerEl).setName(`Additional Template Nr. ${i + 1}`).setDesc("Set the templates name and template for the insert.").addText(
          (text) => text.setValue(val.name).setPlaceholder("Name").onChange(async (value) => {
            settings.templates[i].name = value;
            await this.plugin.saveSettings();
          })
        ).addTextArea(
          (text) => text.setPlaceholder("Template").setValue(val.templateString).onChange(async (value) => {
            settings.templates[i].templateString = value;
            await this.plugin.saveSettings();
          })
        ).addButton(
          (button) => button.setIcon("minus").onClick(async () => {
            settings.templates.splice(i, 1);
            await this.plugin.saveSettings();
            this.display();
          })
        );
      }
    }
    containerEl.createEl("h2", { text: "Workflow Optimizations" });
    new import_obsidian3.Setting(containerEl).setName("Use Additional Templates").setDesc("Enable additional templating options for the insert.").addToggle(
      (toggle) => toggle.setValue(settings.additionalTemplatesEnabled).onChange(async (value) => {
        settings.additionalTemplatesEnabled = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Cursor Placement").setDesc("Whether or not the cursor is placed infront of the insert instead of after it.").addToggle(
      (toggle) => toggle.setValue(settings.placeCursorInfrontOfInsert).onChange(async (value) => {
        settings.placeCursorInfrontOfInsert = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Auto-Select Single Response Queries").setDesc(
      "When hyperlinking: Whether or not to automatically select the response to a query when there is only one article to choose from."
    ).addToggle(
      (toggle) => toggle.setValue(settings.autoInsertSingleResponseQueries).onChange(async (value) => {
        settings.autoInsertSingleResponseQueries = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Use Article Title Instead Of Selection").setDesc(
      "When hyperlinking: Whether or not to use the articles title instead of the selected text for '{title}' parameter."
    ).addToggle(
      (toggle) => toggle.setValue(settings.alwaysUseArticleTitle).onChange(async (value) => {
        settings.alwaysUseArticleTitle = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("br");
    containerEl.createEl("hr");
    containerEl.createEl("h2", { text: "Feedback, Bug Reports and Feature Requests \u{1F33F}" });
    const feedbackParagraph = containerEl.createEl("p");
    feedbackParagraph.setText(
      "If you have any kind feedback, please let me know! I want to make this plugin as useful as possible for everyone. I love to hear about your ideas for new features and all the bugs you found. Don't be shy! Just create an issue "
    );
    feedbackParagraph.createEl("a", {
      text: "on GitHub",
      href: "https://github.com/StrangeGirlMurph/obsidian-wikipedia-search"
    });
    feedbackParagraph.appendText(" and I'll get back to you ASAP ~ Murphy :)");
    containerEl.appendChild(feedbackParagraph);
  }
};

// src/main.ts
var WikipediaSearch = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings");
  }
  async onload() {
    console.log("loading wikipedia-search plugin");
    await this.loadSettings();
    this.addCommand({
      id: "search-article",
      name: "Search Article",
      editorCheckCallback: (checking, editor) => {
        if (!checking)
          new SearchModal(this.app, this, editor).open();
        return true;
      }
    });
    this.addSettingTab(new WikipediaSearchSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};

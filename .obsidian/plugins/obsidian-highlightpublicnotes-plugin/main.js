/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    useFrontmatterHighlight: true,
    usePathHighlight: false,
    frontmatterAttribute: 'classification',
    valueToHighlight: 'public',
    pathToHighlight: '',
    uiElementToHighlight: 'titlebar',
};
class HighlightpublicnotesPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            const { workspace } = this.app;
            this.registerEvent(workspace.on('file-open', this.onFileOpen, this));
            this.addSettingTab(new SettingTab(this.app, this));
        });
    }
    onFileOpen(file) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!file || file.extension !== 'md')
                return;
            // check for path highlighting first
            if (this.settings.usePathHighlight) {
                if (this.checkPath(file.path, this.settings.pathToHighlight)) {
                    this.highlightNote();
                }
                else {
                    this.unhighlightNote();
                    // if not in higlighte path check classifiedFrontmatter
                    this.higlightClassifiedFrontmatterFile(file);
                }
            }
            else if (this.settings.useFrontmatterHighlight) {
                // if no path hilighting check for frontmatter highlighting
                this.higlightClassifiedFrontmatterFile(file);
            }
        });
    }
    higlightClassifiedFrontmatterFile(file) {
        var _a, _b;
        const classification = (_b = (_a = this.app.metadataCache.getFileCache(file)) === null || _a === void 0 ? void 0 : _a.frontmatter) === null || _b === void 0 ? void 0 : _b[this.settings.frontmatterAttribute];
        const normalizedClassification = classification === null || classification === void 0 ? void 0 : classification.toString().toLowerCase();
        const valueToHighlight = this.settings.valueToHighlight;
        const normalizedValueToHighlight = valueToHighlight === null || valueToHighlight === void 0 ? void 0 : valueToHighlight.toString().toLowerCase();
        if (normalizedClassification == normalizedValueToHighlight) {
            this.highlightNote();
        }
        else {
            this.unhighlightNote();
        }
    }
    highlightNote() {
        const titlebar = document.getElementsByClassName(this.settings.uiElementToHighlight)[0];
        if (this.settings.uiElementToHighlight == 'titlebar') {
            titlebar.classList.add("myalert");
        }
        else {
            titlebar.classList.add("myalert-light");
        }
    }
    unhighlightNote() {
        const titlebar = document.getElementsByClassName(this.settings.uiElementToHighlight)[0];
        if (this.settings.uiElementToHighlight == 'titlebar') {
            titlebar.classList.remove("myalert");
        }
        else {
            titlebar.classList.remove("myalert-light");
        }
    }
    checkPath(currentPath, blacklistedPath) {
        return currentPath.includes(blacklistedPath);
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class SettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        new obsidian.Setting(containerEl)
            .setName('Object to highlight')
            .setDesc('Either select the titlebar, the header or the content.')
            .addDropdown(dropdown => {
            return dropdown
                .addOption("titlebar", "Titlebar")
                .addOption("view-header", "Header")
                .addOption("view-content", "Content")
                .setValue(this.plugin.settings.uiElementToHighlight)
                .onChange((value) => {
                this.plugin.settings.uiElementToHighlight = value;
                this.plugin.saveSettings();
            });
        });
        new obsidian.Setting(containerEl)
            .setName('check frontmatter')
            .setDesc('use frontmatter highlighting')
            .addToggle(toogle => {
            toogle
                .setValue(this.plugin.settings.useFrontmatterHighlight)
                .onChange((_) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.useFrontmatterHighlight = !this.plugin.settings.useFrontmatterHighlight;
                yield this.plugin.saveSettings();
                this.display();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName('check path')
            .setDesc('use path highlighting')
            .addToggle(toogle => {
            toogle
                .setValue(this.plugin.settings.usePathHighlight)
                .onChange((_) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.usePathHighlight = !this.plugin.settings.usePathHighlight;
                yield this.plugin.saveSettings();
                this.display();
            }));
        });
        if (this.plugin.settings.useFrontmatterHighlight) {
            this.addFrontMatterSettings(containerEl);
        }
        if (this.plugin.settings.usePathHighlight) {
            this.addPathHighlightSettings(containerEl);
        }
    }
    addPathHighlightSettings(container) {
        container.createEl('h3', {
            text: "Path Highlight Settings"
        });
        new obsidian.Setting(container)
            .setName('Path')
            .setDesc('a path to highlight')
            .addText(text => text
            .setPlaceholder('')
            .setValue(this.plugin.settings.pathToHighlight)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.pathToHighlight = value;
            yield this.plugin.saveSettings();
        })));
    }
    addFrontMatterSettings(container) {
        container.createEl('h3', {
            text: "Frontmatter Settings"
        });
        new obsidian.Setting(container)
            .setName('Attribute')
            .setDesc('the attribute in the frontmatter that indicates the visiblity')
            .addText(text => text
            .setPlaceholder('classification')
            .setValue(this.plugin.settings.frontmatterAttribute)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.frontmatterAttribute = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(container)
            .setName('Value')
            .setDesc('the value that indicates public visibility')
            .addText(text => text
            .setPlaceholder('public')
            .setValue(this.plugin.settings.valueToHighlight)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.valueToHighlight = value;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = HighlightpublicnotesPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

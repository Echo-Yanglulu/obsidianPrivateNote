/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    todoPattern: '(^|\\s)\\.\\.\\.(\\s|$)',
    showStatusBar: false
};
class RandomTodoPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        // file name -> (last updated, positions of todos)
        this.fileCache = new Map(null);
        this.getRandomFileWithTodo = () => __awaiter(this, void 0, void 0, function* () {
            const markdownFiles = this.app.vault.getMarkdownFiles();
            markdownFiles.shuffle();
            for (const markdownFile of markdownFiles) {
                const positions = yield this.collectTodosFromFile(markdownFile);
                if (positions.length > 0) {
                    return markdownFile.path;
                }
            }
        });
        this.getRandomTodoItem = () => __awaiter(this, void 0, void 0, function* () {
            const markdownFiles = this.app.vault.getMarkdownFiles();
            const collectedLinks = Array();
            for (const markdownFile of markdownFiles) {
                const positions = yield this.collectTodosFromFile(markdownFile);
                for (const position of positions) {
                    collectedLinks.push([markdownFile.path, position]);
                }
            }
            const pos = this.randomInt(collectedLinks.length);
            return collectedLinks[pos];
        });
        this.collectTodosFromFile = (file) => __awaiter(this, void 0, void 0, function* () {
            const [mtime, cachedPositions] = this.fileCache.get(file.path) || [0, null];
            if (!cachedPositions && mtime !== file.stat.mtime) {
                const contents = yield this.app.vault.cachedRead(file);
                const lines = contents.split('\n');
                const positions = lines.map((value, index) => ({
                    line: index,
                    ch: value.search(this.todoPattern)
                })).filter(value => value.ch != -1);
                this.fileCache.set(file.path, [file.stat.mtime, positions]);
                return positions;
            }
            return cachedPositions;
        });
        this.randomInt = (max) => Math.floor(Math.random() * max);
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin');
            yield this.loadSettings();
            this.todoPattern = new RegExp(this.settings.todoPattern, 'g');
            if (this.settings.showStatusBar) {
                this.statusBarItem = this.addStatusBarItem();
                this.app.workspace.on("file-open", (file) => {
                    this.app.vault.cachedRead(file).then(contents => {
                        const N = [...contents.matchAll(this.todoPattern)].length;
                        const text = N > 0 ? N + ' to-do items' : '';
                        this.statusBarItem.setText(text);
                    });
                });
                this.app.vault.on("modify", (file) => {
                    this.app.vault.cachedRead(file).then(contents => {
                        const N = [...contents.matchAll(this.todoPattern)].length;
                        const text = N > 0 ? N + ' to-do items' : '';
                        this.statusBarItem.setText(text);
                    });
                });
            }
            this.addCommand({
                id: 'open-random-todo-file',
                name: 'Random Todo: File',
                callback: () => {
                    this.getRandomFileWithTodo().then(link => {
                        this.app.workspace.openLinkText(link, '');
                    });
                }
            });
            this.addCommand({
                id: 'open-random-todo-item',
                name: 'Random Todo: Item',
                callback: () => {
                    this.getRandomTodoItem().then(([link, position]) => {
                        this.app.workspace.openLinkText(link, '').then(() => {
                            this.app.workspace.getActiveViewOfType(obsidian.MarkdownView).editor.setCursor(position);
                        });
                    });
                }
            });
            this.addSettingTab(new RandomTodoPluginSettingTab(this.app, this));
        });
    }
    onunload() {
        console.log('unloading plugin');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class RandomTodoPluginSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for Random To-Do Plugin' });
        new obsidian.Setting(containerEl)
            .setName('To-do item pattern')
            .setDesc('Regular expression which a to-do item should match')
            .addText(text => text
            .setPlaceholder(DEFAULT_SETTINGS.todoPattern)
            .setValue(this.plugin.settings.todoPattern)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.todoPattern = new RegExp(value, 'g');
            this.plugin.settings.todoPattern = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('To-do item count view')
            .setDesc('Show/hide todo count in Status Bar')
            .addToggle(component => component
            .setValue(this.plugin.settings.showStatusBar)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            if (value) {
                this.plugin.statusBarItem.show();
            }
            else {
                this.plugin.statusBarItem.hide();
            }
            this.plugin.settings.showStatusBar = value;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = RandomTodoPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

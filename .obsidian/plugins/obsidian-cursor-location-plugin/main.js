/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    numberCursors: 1,
    selectionMode: "full",
    displayCount: true,
    displayPattern: "ch:ln/ct",
    cursorSeperator: " / ",
    rangeSeperator: "->",
};
class CursorLocation extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.updateCursor = (editor) => {
            if (editor) {
                if (!this.cursorStatusBar) {
                    this.cursorStatusBar = this.addStatusBarItem();
                }
                let selections = editor.listSelections();
                let lineCount = editor.lineCount();
                if (selections && this.settings.numberCursors) {
                    let display;
                    if (selections.length == 1) {
                        display = this.cursorDisplay(selections[0], lineCount);
                    }
                    else if (selections.length <= this.settings.numberCursors) {
                        let cursorStrings = [];
                        selections.forEach((value) => {
                            cursorStrings.push(this.cursorDisplay(value, lineCount, true));
                        });
                        display = cursorStrings.join(this.settings.cursorSeperator);
                        if (/ct/.test(this.settings.displayPattern)) {
                            display += this.settings.cursorSeperator + lineCount;
                        }
                    }
                    else {
                        display = selections.length.toString() + " cursors";
                    }
                    if (this.settings.displayCount && editor.somethingSelected()) {
                        let selectionText = editor.getSelection();
                        display +=
                            " (" +
                                (selectionText.length - selections.length + 1) +
                                " selected)";
                    }
                    this.cursorStatusBar.setText(display);
                }
            }
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("loading Cursor Location plugin");
            this.registerCodeMirror((cm) => {
                cm.on("cursorActivity", this.updateCursor);
            });
            yield this.loadSettings();
            this.addSettingTab(new CursorLocationSettingTab(this.app, this));
            this.updateCursor(this.getEditor());
        });
    }
    onunload() {
        console.log("unloading Cursor Location plugin");
        this.app.workspace.iterateCodeMirrors((cm) => {
            cm.off("cursorActivity", this.updateCursor);
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    getEditor() {
        var _a;
        return (_a = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.editor;
    }
    cursorString(cursor, totalCount, skipTotal = false) {
        let value = this.settings.displayPattern;
        let middlePattern = /^.*(ln|ch).*?ct.*?(ln|ch).*/i;
        let beginPattern = /^.*ct.*((ln|ch).*?(ln|ch).*)/i;
        let endPattern = /(.*(ln|ch).*?(ln|ch)).*?ct.*$/i;
        if (!skipTotal || middlePattern.test(value)) {
            value = value.replace("ct", totalCount.toString());
        }
        else if (beginPattern.test(value)) {
            value = value.replace(beginPattern, "$1");
        }
        else if (endPattern.test(value)) {
            value = value.replace(endPattern, "$1");
        }
        value = value
            .replace("ch", cursor.ch.toString())
            .replace("ln", (cursor.line + 1).toString());
        return value;
    }
    cursorDisplay(selection, totalCount, skipTotal = false) {
        let value;
        if (this.settings.selectionMode == "begin") {
            value = this.cursorString(selection.anchor, totalCount, skipTotal);
        }
        else if (this.settings.selectionMode == "end") {
            value = this.cursorString(selection.head, totalCount, skipTotal);
        }
        else if (selection.anchor.ch == selection.head.ch &&
            selection.anchor.line == selection.head.line) {
            value = this.cursorString(selection.head, totalCount, skipTotal);
        }
        else {
            value =
                this.cursorString(selection.anchor, totalCount, true) +
                    this.settings.rangeSeperator +
                    this.cursorString(selection.head, totalCount, skipTotal);
        }
        return value;
    }
}
class CursorLocationSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    resetComponent(setting, value) {
        let name = setting.nameEl.getText();
        console.log("resetting '" + name + "' to '" + value.toString() + "'");
        let component = setting.components[0];
        component.setValue(value);
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        let cursorEl = containerEl.createDiv();
        cursorEl.createEl("h3", { text: "# of Cursors" });
        let numberCursors = new obsidian.Setting(cursorEl)
            .setName("Number of cursor positions that will display " +
            'in the status bar before switching to "N cursors".')
            .addText((text) => {
            var _a, _b;
            return text
                .setValue((_b = (_a = this.plugin.settings) === null || _a === void 0 ? void 0 : _a.numberCursors) === null || _b === void 0 ? void 0 : _b.toString())
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                let parsedValue = parseInt(value);
                if (!isNaN(parsedValue)) {
                    console.log("Updating number of cursors to display to " + parsedValue);
                    warningSection.setText("");
                    this.plugin.settings.numberCursors = parsedValue;
                    yield this.plugin.saveSettings();
                }
                else {
                    console.log("Number of cursors to display not updated." +
                        "Unable to parse new value into integer: " +
                        value);
                    warningSection.setText(value + " is not a number, unable to save.");
                }
            }));
        });
        let warningSection = cursorEl.createEl("p", {
            text: "",
            attr: { style: "color:red" },
        });
        new obsidian.Setting(cursorEl)
            .setName("Reset to default value of '" + DEFAULT_SETTINGS.numberCursors + "'")
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(numberCursors, DEFAULT_SETTINGS.numberCursors.toString());
            warningSection.setText("");
            this.plugin.settings.numberCursors = DEFAULT_SETTINGS.numberCursors;
            yield this.plugin.saveSettings();
        })));
        let selectionEl = containerEl.createDiv();
        selectionEl.createEl("h3", { text: "Selecion Mode" });
        let selectionMode = new obsidian.Setting(selectionEl)
            .setName("Display the just the beginning, just the end, " +
            "or the full range of a selection.")
            .addDropdown((cb) => cb
            .addOption("begin", "Beginning")
            .addOption("end", "End")
            .addOption("full", "Full Selection")
            .setValue(this.plugin.settings.selectionMode || DEFAULT_SETTINGS.selectionMode)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            console.log("Changing range display to " + value);
            this.plugin.settings.selectionMode = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(selectionEl)
            .setName("Reset to default value of 'Full Selection'")
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(selectionMode, DEFAULT_SETTINGS.selectionMode);
            this.plugin.settings.selectionMode = DEFAULT_SETTINGS.selectionMode;
            yield this.plugin.saveSettings();
        })));
        let displayCountEl = containerEl.createDiv();
        displayCountEl.createEl("h3", { text: "Display Count" });
        let displayCount = new obsidian.Setting(displayCountEl)
            .setName("Display the total number of characters selected.")
            .addToggle((cb) => cb
            .setValue(this.plugin.settings.displayCount != null
            ? this.plugin.settings.displayCount
            : DEFAULT_SETTINGS.displayCount)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            console.log("Chanign display count visiblity to " + value);
            this.plugin.settings.displayCount = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(displayCountEl)
            .setName("Reset to default value of '" + DEFAULT_SETTINGS.displayCount + "'")
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(displayCount, DEFAULT_SETTINGS.displayCount);
            this.plugin.settings.displayCount = DEFAULT_SETTINGS.displayCount;
            yield this.plugin.saveSettings();
        })));
        let displayPatternEl = containerEl.createDiv();
        displayPatternEl.createEl("h3", { text: "Individual Cursor Pattern" });
        let displayPattern = new obsidian.Setting(displayPatternEl)
            .setName("Pattern to display location information for each cursor, " +
            "`ch` is the column the cursor is at in the current line, " +
            "`ln` is the current line number, " +
            "`ct` is the total line numbers in the file (count). " +
            "If `ct` is the first or last of the three values, " +
            "it will be removed when displaying a range.")
            .addText((text) => {
            text
                .setValue(this.plugin.settings.displayPattern)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                console.log("Changing display pattern to " + value);
                this.plugin.settings.displayPattern = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(displayPatternEl)
            .setName("Reset to default value of '" + DEFAULT_SETTINGS.displayPattern + "'")
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(displayPattern, DEFAULT_SETTINGS.displayPattern);
            this.plugin.settings.displayPattern = DEFAULT_SETTINGS.displayPattern;
            yield this.plugin.saveSettings();
        })));
        let cursorSeperatorEl = containerEl.createDiv();
        cursorSeperatorEl.createEl("h3", { text: "Cursor Seperator" });
        let cursorSeperator = new obsidian.Setting(cursorSeperatorEl)
            .setName("String to seperate multiple curor locations when " +
            "`# of Cursors` is greater than 1. Consecutive whitespace " +
            "is squashed to 1 space (per HTML rules).")
            .addText((text) => {
            text
                .setValue(this.plugin.settings.cursorSeperator)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                console.log("Changing cursor seperator to " + value);
                this.plugin.settings.cursorSeperator = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(cursorSeperatorEl)
            .setName("Reset to default value of '" + DEFAULT_SETTINGS.cursorSeperator + "'")
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(cursorSeperator, DEFAULT_SETTINGS.cursorSeperator);
            this.plugin.settings.cursorSeperator =
                DEFAULT_SETTINGS.cursorSeperator;
            yield this.plugin.saveSettings();
        })));
        let rangeSeperatorEl = containerEl.createDiv();
        rangeSeperatorEl.createEl("h3", { text: "Range Seperator" });
        let rangeSeperator = new obsidian.Setting(rangeSeperatorEl)
            .setName("String to seperate the beginning and end of a selection " +
            "when `Selection Mode` is set to `Full Selection`. " +
            "Consecutive whitespace is squashed to 1 space (per HTML rules)")
            .addText((text) => {
            text
                .setValue(this.plugin.settings.rangeSeperator)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                console.log("Changing range seperator to " + value);
                this.plugin.settings.rangeSeperator = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(rangeSeperatorEl)
            .setName("Reset to default value of '" + DEFAULT_SETTINGS.rangeSeperator + "'")
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(rangeSeperator, DEFAULT_SETTINGS.rangeSeperator);
            this.plugin.settings.rangeSeperator = DEFAULT_SETTINGS.rangeSeperator;
            yield this.plugin.saveSettings();
        })));
        let resetEl = containerEl.createDiv();
        resetEl.createEl("h3", { text: "Reset" });
        new obsidian.Setting(resetEl)
            .setName("Reset all settings to default values.")
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(numberCursors, DEFAULT_SETTINGS.numberCursors.toString());
            this.resetComponent(selectionMode, DEFAULT_SETTINGS.selectionMode);
            this.resetComponent(displayCount, DEFAULT_SETTINGS.displayCount);
            this.resetComponent(displayPattern, DEFAULT_SETTINGS.displayPattern);
            this.resetComponent(cursorSeperator, DEFAULT_SETTINGS.cursorSeperator);
            this.resetComponent(rangeSeperator, DEFAULT_SETTINGS.rangeSeperator);
            warningSection.setText("");
            this.plugin.settings = DEFAULT_SETTINGS;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = CursorLocation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm1haW4udHMiXSwic291cmNlc0NvbnRlbnQiOm51bGwsIm5hbWVzIjpbIlBsdWdpbiIsIk1hcmtkb3duVmlldyIsIlBsdWdpblNldHRpbmdUYWIiLCJTZXR0aW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdURBO0FBQ08sU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0FBQzdELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFB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

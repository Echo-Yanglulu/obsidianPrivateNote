/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const PLUGIN_NAME = "Multi-line Formatting";
const DEFAULT_SETTINGS = {
    styleArray: [
        {
            id: "multi-line-format-cyan-highlight",
            nickname: "Cyan Highlighter, even over multiple lines",
            leftStyle: '<span style="background-color:#00FEFE">',
            rightStyle: "</span>",
            skipHeadings: false,
            skipListItems: false,
            skipBlockquotes: false,
        },
        {
            id: "multi-line-format-bold",
            nickname: "Bold, even over multiple lines",
            leftStyle: "**",
            rightStyle: "**",
            skipHeadings: false,
            skipListItems: false,
            skipBlockquotes: false,
        },
    ],
};
const NEW_STYLE_DEFAULTS = {
    id: "",
    nickname: "Empty format",
    leftStyle: "",
    rightStyle: "",
    skipHeadings: false,
    skipListItems: false,
    skipBlockquotes: false,
};
class MultilineFormattingPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Loading " + PLUGIN_NAME + " Plugin");
            yield this.loadSettings();
            for (const style of this.settings.styleArray) {
                this.addStyleCommand(style);
            }
            this.addSettingTab(new MultilineFormattingSettingTab(this.app, this));
        });
    }
    onunload() {
        console.log("Unloading " + PLUGIN_NAME + "Plugin");
    }
    formatSelection(editor, view, style) {
        const cache = this.app.metadataCache.getCache(view.file.path);
        const sections = cache.sections;
        const formatter = new Formatter(style);
        formatter.formatSelection(editor, sections);
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    addStyleCommand(style) {
        this.addCommand({
            id: style.id,
            name: style.nickname,
            editorCallback: (editor, view) => {
                this.formatSelection(editor, view, style);
            },
        });
    }
    addFormattingStyle() {
        const id = String(Math.abs((Date.now() ^ (Math.random() * (1 << 30))) % (1 << 30)));
        const newStyle = Object.assign(Object.assign({}, NEW_STYLE_DEFAULTS), { id: id });
        this.settings.styleArray.push(newStyle);
        this.addStyleCommand(newStyle);
        return newStyle;
    }
    deleteFormattingStyle(style) {
        const index = this.settings.styleArray.indexOf(style);
        if (index >= 0) {
            this.settings.styleArray.splice(index, 1);
        }
        //@ts-ignore
        const appCommands = this.app.commands;
        if (appCommands.findCommand(style.id)) {
            delete appCommands.editorCommands[style.id];
            delete appCommands.commands[style.id];
        }
    }
}
function sectionBinarySearch(line, sections) {
    let low = 0;
    let high = sections.length;
    while (low < high) {
        const midpoint = low + ((high - low) >> 1);
        const midposition = sections[midpoint].position;
        if (line < midposition.start.line) {
            /* cursor before middle section */
            high = midpoint;
        }
        else if (line <= midposition.end.line) {
            /* cursor in middle section */
            return midpoint;
        }
        else {
            /* cursor after middle section */
            low = midpoint + 1;
        }
    }
    /* this might not be the right thing to do. */
    return low;
}
class MultilineFormattingSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Settings for " + PLUGIN_NAME });
        const allStyleDiv = containerEl.createEl("div");
        for (const style of this.plugin.settings.styleArray) {
            const div = this.formattingStyleSetting(style);
            allStyleDiv.appendChild(div);
        }
        new obsidian.Setting(containerEl).addButton((t) => {
            t.setButtonText("Add new formatting style");
            t.onClick((v) => __awaiter(this, void 0, void 0, function* () {
                const newStyle = this.plugin.addFormattingStyle();
                const div = this.formattingStyleSetting(newStyle);
                allStyleDiv.appendChild(div);
            }));
        });
    }
    formattingStyleSetting(style) {
        const containerEl = document.createElement("div");
        const commandheader = containerEl.createEl("h3", {
            text: "Settings for " + style.nickname,
        });
        new obsidian.Setting(containerEl)
            .setName("Nickname")
            .setDesc("The name for your formatting command in the command palette.")
            .addText((text) => text
            // .setPlaceholder('')
            .setValue(style.nickname)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            style.nickname = value;
            commandheader.setText("Settings for " + style.nickname);
            this.plugin.addStyleCommand(style);
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Left")
            .setDesc("The opening tag, or the left part of a highlight (==), bold (**), etc.")
            .addTextArea((text) => text
            .setPlaceholder("")
            .setValue(style.leftStyle)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            style.leftStyle = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Right")
            .setDesc("The closing tag, or the right part of a highlight (==), bold (**), etc.")
            .addTextArea((text) => text
            .setPlaceholder("")
            .setValue(style.rightStyle)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            style.rightStyle = value;
            yield this.plugin.saveSettings();
        })));
        // const skipDetails: HTMLDetailsElement = containerEl.createEl("details");
        // skipDetails.createEl("summary", { text: "Skip some section types" });
        // new Setting(skipDetails)
        //   .setName('Skip List Items')
        //   .setDesc('Turn this toggle ON to exclude text in list items.')
        //   .addToggle((t) => {
        //     t.setValue(style.skipListItems);
        //     t.onChange(async (v) => {
        //       style.skipListItems = v;
        //       await this.plugin.saveSettings();
        //     })
        //   });
        new obsidian.Setting(containerEl)
            .setName("Skip Headings")
            .setDesc("Turn this toggle ON to exclude text in headings.")
            .addToggle((t) => {
            t.setValue(style.skipHeadings);
            t.onChange((v) => __awaiter(this, void 0, void 0, function* () {
                style.skipHeadings = v;
                yield this.plugin.saveSettings();
            }));
        });
        // new Setting(skipDetails)
        //     .setName('Skip Blockquotes')
        //     .setDesc('Turn this toggle ON to exclude text in blockquotes.')
        //     .addToggle((t) => {
        //       t.setValue(style.skipBlockquotes);
        //       t.onChange(async (v) => {
        //         style.skipBlockquotes = v;
        //         await this.plugin.saveSettings();
        //       })
        //     });
        new obsidian.Setting(containerEl).addButton((t) => {
            t.setButtonText("Delete this style");
            t.onClick((v) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                if (confirm("Are you sure you want to delete " + style.nickname + "?")) {
                    (_a = containerEl.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(containerEl);
                    this.plugin.deleteFormattingStyle(style);
                }
            }));
        });
        return containerEl;
    }
}
const HEADING_REGEX = /^(?<prefix>\s*#{1,6}\s+)(?<remainder>.*)$/;
const BLOCKQUOTE_REGEX = /^(?<prefix>\s*>\s*)(?<remainder>.*)$/;
const LIST_REGEX = /^(?<prefix>\s*(\*|\+|-|\d+\.|\d+\))\s+(\[.\]\s+)?)(?<remainder>.*)$/;
const LEFT_TRIM_REGEX = /^(?<prefix>\s*)(?<remainder>.*)$/;
const WHITESPACE_ONLY_REGEX = /^\s*$/;
class Formatter {
    constructor(style) {
        this.replacement = [];
        this.style = style;
        this.lastNonEmptyIndex = -1;
        this.isPrecededByParagraphBreak = true;
        this.previousBlockquoteLevel = 0;
        this.blockquoteLevelSoFar = 0;
    }
    formatSelection(doc, sections) {
        const start = doc.getCursor("from");
        const end = doc.getCursor("to");
        if (start === end) {
            doc.replaceSelection(this.style.leftStyle + this.style.rightStyle);
            doc.setCursor(start.line, start.ch + this.style.leftStyle.length);
            return;
        }
        for (let lineNum = start.line; lineNum <= end.line; lineNum++) {
            const currentSectionIndex = sectionBinarySearch(lineNum, sections);
            const line = doc.getLine(lineNum);
            this.blockquoteLevelSoFar = 0;
            const startCol = lineNum == start.line ? start.ch : 0;
            const endCol = lineNum == end.line ? end.ch : line.length;
            const parsedLineType = getLineType(line);
            if (sections[currentSectionIndex].type == "code") {
                parsedLineType.desc = "code";
            }
            this.replacement.push(this.processLine(line, startCol, endCol, parsedLineType));
        }
        this.applyRightAbove();
        doc.replaceSelection(this.getReplacement());
    }
    getReplacement() {
        return this.replacement.join("\n");
    }
    processRemainder(remainder, startCh, endCh) {
        const lineType = getLineType(remainder);
        return this.processLine(remainder, startCh, endCh, lineType);
    }
    processLine(line, startCol, endCol, lineType) {
        const { desc, prefix, remainder } = lineType;
        if (desc === "blockquote") {
            this.blockquoteLevelSoFar += 1;
        }
        if (desc === "code") {
            return line.substring(startCol, endCol);
        }
        return (prefix.substring(startCol, endCol) +
            this[desc](remainder, startCol - prefix.length, endCol - prefix.length));
    }
    blockquote(remainder, startCh, endCh) {
        console.debug("bq-level:", this.blockquoteLevelSoFar, "previous:", this.previousBlockquoteLevel);
        if (this.previousBlockquoteLevel < this.blockquoteLevelSoFar) {
            this.isPrecededByParagraphBreak = true;
            this.applyRightAbove();
            this.previousBlockquoteLevel = this.blockquoteLevelSoFar;
        }
        return this.processRemainder(remainder, startCh, endCh);
    }
    heading(remainder, startCh, endCh) {
        const selectedRemainder = remainder.substring(startCh, endCh);
        console.debug("This is a heading");
        this.applyRightAbove();
        this.isPrecededByParagraphBreak = true;
        if (selectedRemainder.search(WHITESPACE_ONLY_REGEX) >= 0 ||
            this.style.skipHeadings) {
            return selectedRemainder;
        }
        else {
            this.setCurrentLineNonEmpty();
            return this.style.leftStyle + selectedRemainder;
        }
    }
    list(remainder, startCh, endCh) {
        this.isPrecededByParagraphBreak = true;
        return this.processRemainder(remainder, startCh, endCh);
    }
    paragraph(remainder, startCh, endCh) {
        if (remainder == "") {
            this.isPrecededByParagraphBreak = true;
            this.previousBlockquoteLevel = this.blockquoteLevelSoFar;
            return remainder;
        }
        else if (remainder.substring(startCh, endCh).search(WHITESPACE_ONLY_REGEX) >= 0) {
            return remainder.substring(startCh, endCh);
        }
        else {
            let returnable;
            if (this.isPrecededByParagraphBreak) {
                this.isPrecededByParagraphBreak = false;
                this.applyRightAbove();
                returnable = this.style.leftStyle + remainder.substring(startCh, endCh);
            }
            else {
                returnable = remainder.substring(startCh, endCh);
            }
            this.setCurrentLineNonEmpty();
            return returnable;
        }
    }
    setCurrentLineNonEmpty() {
        this.lastNonEmptyIndex = this.replacement.length;
    }
    applyRightAbove() {
        if (this.lastNonEmptyIndex >= 0 && this.replacement.length > 0) {
            const [, rightTrimmed, endWhitespace] = this.replacement[this.lastNonEmptyIndex].match(/^(.*?)(\s*)$/);
            this.replacement[this.lastNonEmptyIndex] =
                rightTrimmed + this.style.rightStyle + endWhitespace;
            this.lastNonEmptyIndex = -1;
            return true;
        }
        else
            return false;
    }
}
function getLineType(line) {
    const headingMatch = line.match(HEADING_REGEX);
    if (headingMatch != null) {
        console.debug("HeadingMatch:", headingMatch);
        const { prefix, remainder } = headingMatch.groups;
        return { desc: "heading", prefix, remainder };
    }
    const listMatch = line.match(LIST_REGEX);
    if (listMatch != null) {
        const { prefix, remainder } = listMatch.groups;
        return { desc: "list", prefix, remainder };
    }
    const blockquoteMatch = line.match(BLOCKQUOTE_REGEX);
    if (blockquoteMatch != null) {
        const { prefix, remainder } = blockquoteMatch.groups;
        return { desc: "blockquote", prefix, remainder };
    }
    const { prefix, remainder } = line.match(LEFT_TRIM_REGEX).groups;
    return { desc: "paragraph", prefix, remainder };
}

module.exports = MultilineFormattingPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsInNyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpudWxsLCJuYW1lcyI6WyJQbHVnaW4iLCJQbHVnaW5TZXR0aW5nVGFiIiwiU2V0dGluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXVEQTtBQUNPLFNBQVMsU0FBUyxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRTtBQUM3RCxJQUFJLFNBQVMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sS0FBSyxZQUFZLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsVUFBVSxPQUFPLEVBQUUsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtBQUNoSCxJQUFJLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxFQUFFLFVBQVUsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUMvRCxRQUFRLFNBQVMsU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7QUFDbkcsUUFBUSxTQUFTLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7QUFDdEcsUUFB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

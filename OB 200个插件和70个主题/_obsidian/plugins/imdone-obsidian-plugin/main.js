/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var path = require('path');
var require$$0 = require('fs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

/**
 * Simple asynchronous tool for saving my life.
 */

/**
 * A wrapper function create a `Chain` instance at the same 
 * time initializes the `queue` with a serial of arguments. 
 */
var traverseChain = function() {
  var s = new Chain();
  return s.__init.apply(s, arguments);
};


/** 
 * Chain constructor.
 * @api pivate
 */
function Chain() {
  this.queue = [];
  this.onend = function(err) {};
  this.pass = true;
} 


/**
 * Trying to Initialize the `queue` with a serial of arguments. 
 *
 * @api private
 */
Chain.prototype.__init = function() {
  this.queue = [].slice.call(arguments);
  return this;
};


/**
 * Add a `job` or an array of `jobs` into the Chain.
 * A `job` is defined by a function. 
 *
 * @param {Function|Array} a function or an array of functions 
 * @return {Chain}
 * @api public
 */
Chain.prototype.add = function() {
  var jobs = [].slice.call(arguments);
  jobs.forEach(
    (function(job) {
      this.queue.push.apply(
        this.queue, Array.isArray(job) ? job : [job]
      );
    }).bind(this)
  );
  return this;
};


/**
 * The iterator of the Chain. When it reaches end then call 
 * call the callback function.
 * 
 * @return {Chain}
 * @api public
 */
Chain.prototype.next = function() {
  if (!this.pass) return this;
  if (this.queue.length) {
    this.queue.shift().call();    
  } else {
    this.onend();
  }
  return this;
};  


/**
 * Terminate the chain.
 * 
 * @return {Chain}
 * @api public
 */
Chain.prototype.stop = function() {
  this.pass = false;
  this.onend.apply(this, arguments);
  return this;
};  
 

/**
 * Start iterating through the Chain and ends with the  
 * given callback.
 * 
 * @param {Function} end callback
 * @return {Chain} 
 * @api public
 */
Chain.prototype.traverse = function(fn) {
  fn && fn.call && fn.apply && (this.onend = fn);
  this.next();
  return this;
};

var find_1 = createCommonjsModule(function (module) {
var fs = require$$0__default['default'];




/**
 * Outline the APIs.
 */
var find = module.exports = {

  // file:      function([pat,] root, callback) {}
  // dir:       function([pat,] root, callback) {}

  // eachfile:  function([pat,] root, action) {}
  // eachdir:   function([pat,] root, action) {}

  // fileSync:  function([pat,] root) {}
  // dirSync:   function([pat,] root) {}
  // use::      function(options) {}

};


var fss = {};

/**
 *  Error handler wrapper.
 */
fss.errorHandler = function(err) {
  if (err) {
    if (find.__errorHandler) {
      find.__errorHandler(err);
    } else {
      throw err;
    }
  }
};


var error = {
  notExist: function(name) {
    return new Error(name + ' does not exist.');
  }
};


var is = (function() {
  function existed(name) {
    return fs.existsSync(name);
  }
  function fsType(type) {
    return function(name) {
      try {
        return fs.lstatSync(name)['is' + type]();
      } catch(err) {
        if (!/^(EPERM|EACCES)$/.test(err.code)) {
          fss.errorHandler(err);
        }
        else {
          console.warn('Warning: Cannot access %s', name);
        }
      }
    }
  }
  function objType(type) {
    return function(input) {
      if (type === 'Function') {
        return typeof input === 'function';
      }
      return ({}).toString.call(input) === '[object ' + type +  ']';
    }
  }
  return {
    existed:      existed,
    file:         fsType('File'),
    directory:    fsType('Directory'),
    symbolicLink: fsType('SymbolicLink'),

    string:       objType('String'),
    regexp:       objType('RegExp'),
    func:         objType('Function')
  };
}());


/**
 *  Method injection for handling errors.
 */
['readdir', 'lstat'].forEach(function(method) {
  fss[method] = function(path, callback) {
    var origin = fs[method];
    return origin.apply(fs, [path, function(err) {
      fss.errorHandler(err);
      return callback.apply(null, arguments);
    }]);
  };
});


/**
 * Enhancement for fs.readlink && fs.readlinkSync.
 */
fss.readlink = function(name, fn, depth) {
  if (depth == undefined) depth = 5;
  if (!is.existed(name) && (depth < 5)) {
    return fn(path__default['default'].resolve(name));
  }
  var isSymbolicLink = is.symbolicLink(name);
  if (!isSymbolicLink) {
    fn(path__default['default'].resolve(name));
  } else if (depth) {
    fs.realpath(name, function(err, origin) {
      if (err && /^(ENOENT|ELOOP|EPERM|EACCES)$/.test(err.code)) {
        fn(name);
      } else {
        if (err) {
          fss.errorHandler(err);
        } else {
          fss.readlink(origin, fn, --depth);
        }
      }
    });
  } else {
    fn(isSymbolicLink ? '' : path__default['default'].resolve(name));
  }
};

fss.readlinkSync = function(name, depth) {
  if (depth == undefined) depth = 5;
  if (!is.existed(name) && depth < 5) {
    return path__default['default'].resolve(name);
  }
  var isSymbolicLink = is.symbolicLink(name);
  if (!isSymbolicLink) {
    return path__default['default'].resolve(name);
  } else if (depth) {
    var origin;
    try {
      origin = fs.realpathSync(name);
    } catch (err) {
      if (/^(ENOENT|ELOOP|EPERM|EACCES)$/.test(err.code)) {
        return name;
      } else {
        fss.errorHandler(err);
      }
    }
    return fss.readlinkSync(origin, --depth);
  } else {
    return isSymbolicLink ? '' : path__default['default'].resolve(name);
  }
};


/**
 * Check pattern against the path
 */
var compare = function(pat, name) {
  var str = path__default['default'].basename(name);
  return (
       is.regexp(pat) && pat.test(name)
    || is.string(pat) && pat === str
  );
};


/**
 * Traverse a directory recursively and asynchronously.
 *
 * @param {String} root
 * @param {String} type
 * @param {Function} action
 * @param {Function} callback
 * @param {Chain} c
 * @api private
 */
var traverseAsync = function(root, type, action, callback, c) {
  if (!is.existed(root)) {
    fss.errorHandler(error.notExist(root));
  }

  var originRoot = root;
  if (is.symbolicLink(root)) {
    root = fss.readlinkSync(root);
  }

  if (is.directory(root)) {
    fss.readdir(root, function(err, all) {
      var chain = traverseChain();
      all && all.forEach(function(dir) {
        dir = path__default['default'].join(originRoot, dir);
        chain.add(function() {
          var handleFile = function() {
            if (type == 'file') action(dir);
            process.nextTick(function() { chain.next(); });
          };
          var handleDir = function(skip) {
            if (type == 'dir') action(dir);
            if (skip) chain.next();
            else process.nextTick(function() { traverseAsync(dir, type, action, callback, chain);});
          };
          var isSymbolicLink = is.symbolicLink(dir);
          if (is.directory(dir)) {
            handleDir();
          } else if (isSymbolicLink) {
            fss.readlink(dir, function(origin) {
              if (origin) {
                if (is.existed(origin) && is.directory(origin)) {
                  handleDir(isSymbolicLink);
                } else {
                  handleFile();
                }
              } else {
                chain.next();
              }
            });
          } else {
            handleFile();
          }
        });
      });
      chain.traverse(function() {
        c ? c.next() : callback();
      });
    });
  }
};


/**
 * Traverse a directory recursively.
 *
 * @param {String} root
 * @param {String} type
 * @param {Function} action
 * @return {Array} the result
 * @api private
 */
var traverseSync = function(root, type, action) {
  if (!is.existed(root)) throw error.notExist(root);
  var originRoot = root;
  if (is.symbolicLink(root)) {
    root = fss.readlinkSync(root);
  }
  if (is.directory(root)) {
    fs.readdirSync(root).forEach(function(dir) {
      dir = path__default['default'].join(originRoot, dir);
      var handleDir = function(skip) {
        if (type == 'dir') action(dir);
        if (skip) return;
        traverseSync(dir, type, action);
      };
      var handleFile = function() {
        if (type == 'file') action(dir);
      };
      var isSymbolicLink = is.symbolicLink(dir);
      if (is.directory(dir)) {
        handleDir();
      } else if (isSymbolicLink) {
        var origin = fss.readlinkSync(dir);
        if (origin) {
          if (is.existed(origin) && is.directory(origin)) {
            handleDir(isSymbolicLink);
          } else {
            handleFile();
          }
        }
      } else {
        handleFile();
      }
    });
  }
};


['file', 'dir'].forEach(function(type) {

  /**
   * `find.file` and `find.dir`
   *
   * Find files or sub-directories in a given directory and
   * passes the result in an array as a whole. This follows
   * the default callback style of nodejs, think about `fs.readdir`,
   *
   * @param {RegExp|String} pat
   * @param {String} root
   * @param {Function} fn
   * @api public
   */
  find[type] = function(pat, root, fn) {
    var buffer = [];
    if (arguments.length == 2) {
      fn = root;
      root = pat;
      pat = '';
    }
    process.nextTick(function() {
      traverseAsync(
        root
      , type
      , function(n) { buffer.push(n);}
      , function() {
          if (is.func(fn) && pat) {
            fn(buffer.filter(function(n) {
              return compare(pat, n);
            }));
          } else {
            fn(buffer);
          }
        }
      );
    });
    return {
      error: function(handler) {
        if (is.func(handler)) {
          find.__errorHandler = handler;
        }
      }
    }
  };

  /**
   * `find.eachfile` and `find.eachdir`
   *
   * Find files or sub-directories in a given directory and
   * apply with a given action to each result immediately
   * rather than pass them back as an array.
   *
   * @param {RegExp|String} pat
   * @param {String} root
   * @param {Function} action
   * @return {Object} for chain methods
   * @api public
   *
   */
  find['each' + type] = function(pat, root, action) {
    var callback = function() {};
    if (arguments.length == 2) {
      action = root;
      root = pat;
      pat = '';
    }
    process.nextTick(function() {
      traverseAsync(
          root
        , type
        , function(n) {
            if (!is.func(action)) return;
            if (!pat || compare(pat, n)) {
              action(n);
            }
          }
        , callback
      );
    });
    return {
      end: function(fn) {
        if (is.func(fn)) {
          callback = fn;
        }
        return this;
      },
      error: function(handler) {
        if (is.func(handler)) {
          find.__errorHandler = handler;
        }
        return this;
      }
    };
  };

  /**
   * `find.fileSync` and `find.dirSync`
   *
   * Find files or sub-directories in a given directory synchronously
   * and returns the result as an array. This follows the default 'Sync'
   * methods of nodejs, think about `fs.readdirSync`,
   *
   * @param {RegExp|String} pat
   * @param {String} root
   * @return {Array} the result
   * @api public
   */
  find[type + 'Sync'] = function(pat, root) {
    var buffer = [];
    if (arguments.length == 1) {
      root = pat;
      pat = '';
    }
    traverseSync(root, type, function(n) {
      buffer.push(n);
    });
    return pat && buffer.filter(function(n) {
      return compare(pat, n);
    }) || buffer;
  };

});


var fsMethods = [
  'existsSync',
  'lstatSync',
  'realpath',
  'realpathSync',
  'readdir',
  'readdirSync'
];


/**
 * Configuations for internal usage
 *
 * @param {Object} options
 * @api public
 */
find.use = function(options) {
  if (options && options.fs) {
    if (fsMethods.every(n => !!options.fs[n])) {
      fs = options.fs;
    } else {
      throw new Error('The provided fs object is not compatiable with native fs.');
    }
  }
  return find;
};
});

const hashRegex = /#([a-zA-Z-_]+?)(:)(-?[\d.]+(?:e-?\d+)?)?/;
const actionName = 'open-to-line';
class ImdonePlugin extends obsidian.Plugin {
    constructor(app, pluginManifest) {
        super(app, pluginManifest);
        this.app = app;
        this.workspace = app.workspace;
        this.adapter = app.vault.adapter;
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading imdone plugin');
            this.imdonePaths = yield this.getImdoneProjectPaths();
            this.inImdoneProject = yield this.isVaultInImdoneProject();
            this.registerMarkdownPostProcessor((el, ctx) => this.markdownPostProcessor(el, ctx));
            this.registerObsidianProtocolHandler(actionName, (params) => {
                if (params.action == actionName && params.file) {
                    const file = params.file.substring(1).replace(/\\/g, '/');
                    this.workspace.openLinkText(file, '', false, { state: { mode: 'source' } }).then(() => {
                        const cmEditor = this.getEditor();
                        if (!cmEditor)
                            return;
                        if (params.line) {
                            cmEditor.setCursor(parseInt(params.line, 10), 0);
                            cmEditor.scrollIntoView(null, 200);
                        }
                        cmEditor.focus();
                    });
                }
            });
        });
    }
    onunload() {
        console.log('unloading imdone plugin');
    }
    getEditor() {
        const markdownView = this.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (!markdownView)
            return;
        const cmEditor = markdownView.sourceMode.cmEditor;
        return cmEditor;
    }
    markdownPostProcessor(el, ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            const sourceFilePath = path.join(this.getVaultPath(), ctx.sourcePath);
            if (this.isFileInImdoneProject(sourceFilePath)) {
                this.updateCardLinksHref(el);
                this.makeCardHashtagsLinks(el);
            }
        });
    }
    isImdoneCardLink(el) {
        return el && hashRegex.test(el.hash);
    }
    getImdoneCardLinks(el) {
        const links = Array.from(el.querySelectorAll('.external-link'));
        return links.filter(el => this.isImdoneCardLink(el));
    }
    updateCardLinksHref(el) {
        const links = this.getImdoneCardLinks(el);
        links.forEach((link) => {
            const { text, hash } = link;
            link.href = this.getImdoneURL(text, hash, 'MARKDOWN');
        });
    }
    isImdoneCardHashtag(el) {
        return hashRegex.test(el.parentElement.getText());
    }
    getImdoneCardHashtags(el) {
        const links = Array.from(el.querySelectorAll('a.tag[href^="#"]'));
        return links.filter(el => this.isImdoneCardHashtag(el));
    }
    makeCardHashtagsLinks(el) {
        this.getImdoneCardHashtags(el).forEach(el => {
            const parent = el.parentElement;
            const tag = el.innerText;
            const text = parent.getText();
            const hash = text.match(hashRegex)[0];
            parent.childNodes.forEach(node => {
                if (node.nodeName === '#text')
                    node.textContent = '';
            });
            const imdoneLink = document.createElement('a');
            const imdoneLinkText = text.replace(hash, '');
            imdoneLink.setText(text.replace(tag, ''));
            imdoneLink.href = this.getImdoneURL(imdoneLinkText, hash, 'HASHTAG');
            imdoneLink.addClass('external-link');
            parent.append(imdoneLink);
        });
    }
    getImdoneURL(text, hash, type) {
        const path = this.getActiveFilePath().replace(/\\/g, '/');
        return `imdone://${encodeURI(path)}?text=${encodeURIComponent(text.trim())}&hash=${encodeURIComponent(hash)}&type=${type}`;
    }
    getActiveFilePath() {
        const path = this.workspace.getActiveFile().path;
        return this.adapter.getFullPath(path);
    }
    getActiveFileDir() {
        return path.join(this.getVaultPath(), path.dirname(this.workspace.getActiveFile().path));
    }
    getVaultPath() {
        return this.adapter.getBasePath();
    }
    isVaultInImdoneProject() {
        return __awaiter(this, void 0, void 0, function* () {
            let cwd = this.getVaultPath();
            while (true) {
                const imdonePath = path.join(cwd, '.imdone');
                if (yield this.exists(imdonePath))
                    return !!imdonePath;
                const dirNames = cwd.split(path.sep);
                dirNames.pop();
                cwd = dirNames.join(path.sep);
                if (cwd === '')
                    return;
            }
        });
    }
    isFileInImdoneProject(file) {
        return this.inImdoneProject || this.imdonePaths.find(_path => {
            return file.startsWith(_path);
        });
    }
    getImdoneProjectPaths() {
        return __awaiter(this, void 0, void 0, function* () {
            const cwd = this.getVaultPath();
            return new Promise((resolve, reject) => {
                find_1.dir(/\.imdone$/, cwd, dirs => {
                    resolve(dirs.map(dir => dir.replace(/\.imdone$/, '')));
                }).error(reject);
            });
        });
    }
    exists(_path) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const stats = yield require$$0.promises.stat(_path);
                return stats && stats.isDirectory();
            }
            catch (_a) {
                return false;
            }
        });
    }
}

module.exports = ImdonePlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

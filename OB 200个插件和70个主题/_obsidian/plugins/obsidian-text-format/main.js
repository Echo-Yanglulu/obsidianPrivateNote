/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

/* To Title Case © 2018 David Gouch | https://github.com/gouch/to-title-case */

// eslint-disable-next-line no-extend-native
String.prototype.toTitleCase = function () {
  var smallWords = /^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|v.?|vs.?|via)$/i;
  var alphanumericPattern = /([A-Za-z0-9\u00C0-\u00FF])/;
  var wordSeparators = /([ :–—-])/;

  return this.split(wordSeparators)
    .map(function (current, index, array) {
      if (
        /* Check for small words */
        current.search(smallWords) > -1 &&
        /* Skip first and last word */
        index !== 0 &&
        index !== array.length - 1 &&
        /* Ignore title end and subtitle start */
        array[index - 3] !== ':' &&
        array[index + 1] !== ':' &&
        /* Ignore small words that start a hyphenated phrase */
        (array[index + 1] !== '-' ||
          (array[index - 1] === '-' && array[index + 1] === '-'))
      ) {
        return current.toLowerCase()
      }

      /* Ignore intentional capitalization */
      if (current.substr(1).search(/[A-Z]|\../) > -1) {
        return current
      }

      /* Ignore URLs */
      if (array[index + 1] === ':' && array[index + 2] !== '') {
        return current
      }

      /* Capitalize the first letter */
      return current.replace(alphanumericPattern, function (match) {
        return match.toUpperCase()
      })
    })
    .join('')
};

const LC = "[\\w\\u0400-\\u04FF]"; // Latin and Cyrillic
class TextFormat extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new TextFormatSettingTab(this.app, this));
            this.addCommand({
                id: "text-format-lower",
                name: "Lowercase selected text",
                callback: () => this.textFormat("lowercase"),
            });
            this.addCommand({
                id: "text-format-upper",
                name: "Uppercase selected text",
                callback: () => this.textFormat("uppercase"),
            });
            this.addCommand({
                id: "text-format-capitalize-word",
                name: "Capitalize all words in selected text",
                callback: () => this.textFormat("capitalize-word"),
            });
            this.addCommand({
                id: "text-format-capitalize-sentence",
                name: "Capitalize only first word of sentence in selected text",
                callback: () => this.textFormat("capitalize-sentence"),
            });
            this.addCommand({
                id: "text-format-titlecase",
                name: "Title case selected text",
                callback: () => this.textFormat("titlecase"),
            });
            this.addCommand({
                id: "text-format-remove-spaces",
                name: "Remove redundant spaces in selection",
                callback: () => this.textFormat("spaces"),
            });
            this.addCommand({
                id: "text-format-merge-line",
                name: "Merge broken paragraph(s) in selection",
                callback: () => this.textFormat("merge"),
            });
            this.addCommand({
                id: "text-format-bullet-list",
                name: "Format bullet list",
                callback: () => this.textFormat("bullet"),
            });
            this.addCommand({
                id: "text-format-ordered-list",
                name: "Format ordered list",
                callback: () => this.textFormat("ordered"),
            });
            this.addCommand({
                id: "text-format-split-blank",
                name: "Split line(s) by blanks",
                callback: () => this.textFormat("split-blank"),
            });
            this.addCommand({
                id: "text-format-chinese-character",
                name: "Convert to Chinese character of this file (,;:!?)",
                callback: () => this.convertChinese(),
            });
        });
    }
    convertChinese() {
        let markdownView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (!markdownView) {
            return;
        }
        let sourceMode = markdownView.sourceMode;
        let content = sourceMode.get();
        content = content
            .replace(/,/g, "，")
            .replace(/;/g, "；")
            .replace(/(?<=[^a-zA-Z0-9]):/g, "：")
            .replace(/\!(?=[^\[])/g, "！")
            .replace(/\?/g, "？");
        sourceMode.set(content, false);
    }
    textFormat(cmd) {
        let markdownView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (!markdownView) {
            return;
        }
        let editor = markdownView.editor;
        var selectedText, replacedText;
        if (!editor.somethingSelected()) {
            let cursor = editor.getCursor();
            cursor.ch = 0;
            let aos = editor.posToOffset(cursor);
            cursor.line += 1;
            let hos = editor.posToOffset(cursor);
            if (cursor.line <= editor.lastLine()) {
                // don't select the next line which is not selected by user
                hos -= 1;
            }
            editor.setSelection(editor.offsetToPos(aos), editor.offsetToPos(hos));
        }
        selectedText = editor.getSelection();
        switch (cmd) {
            case "capitalize-word":
            case "titlecase":
                if (this.settings.LowercaseFirst) {
                    replacedText = selectedText.toLowerCase();
                }
                else {
                    replacedText = selectedText;
                }
                break;
            case "split-blank":
            case "bullet":
            case "ordered":
                let from = editor.getCursor("from");
                let to = editor.getCursor("to");
                from.ch = 0;
                to.line += 1;
                to.ch = 0;
                if (to.line <= editor.lastLine()) {
                    editor.setSelection(from, editor.offsetToPos(editor.posToOffset(to) - 1));
                }
                else {
                    editor.setSelection(from, to);
                }
                selectedText = editor.getSelection();
                break;
        }
        switch (cmd) {
            case "lowercase":
                replacedText = selectedText.toLowerCase();
                break;
            case "uppercase":
                replacedText = selectedText.toUpperCase();
                break;
            case "capitalize-word":
                replacedText = capitalizeWord(selectedText);
                break;
            case "capitalize-sentence":
                replacedText = capitalizeSentence(selectedText);
                break;
            case "titlecase":
                // @ts-ignore
                replacedText = replacedText.toTitleCase();
                break;
            case "spaces":
                replacedText = selectedText.replace(/ +/g, " ");
                // replacedText = replacedText.replace(/\n /g, "\n"); // when a single space left at the head of the line
                break;
            case "merge":
                replacedText = selectedText.replace(/(?<!\n)\n(?!\n)/g, " ");
                console.log(this.settings);
                if (this.settings.MergeParagraph_Newlines) {
                    replacedText = replacedText.replace(/\n\n+/g, "\n\n");
                }
                if (this.settings.MergeParagraph_Spaces) {
                    replacedText = replacedText.replace(/ +/g, " ");
                }
                break;
            case "bullet":
                replacedText = selectedText.replace(/(^|(?<=[\s])) *• */g, "\n- ");
                replacedText = replacedText.replace(/\n+/g, "\n").replace(/^\n/, "");
                break;
            case "ordered":
                let orderedCount = 0;
                console.log(orderedCount);
                replacedText = selectedText.replace(/(^|\s)[^\s[\(]]+\)|[:;]\w+\)|(?<=^|\s)[0-9]\./g, function (t) {
                    orderedCount++;
                    let head = "\n"; // if single line, then add newline character.
                    if (selectedText.indexOf("\n") > -1) {
                        head = "";
                    }
                    return head + String(orderedCount) + ". ";
                });
                replacedText = replacedText.replace(/\n+/g, "\n").replace(/^\n/, "");
                break;
            case "split-blank":
                replacedText = selectedText.replace(/ /g, "\n");
                break;
            default:
                return;
        }
        const fos = editor.posToOffset(editor.getCursor("from"));
        if (replacedText != selectedText) {
            editor.replaceSelection(replacedText);
        }
        if (cmd != "merge") {
            const tos = editor.posToOffset(editor.getCursor("to")); // to offset
            editor.setSelection(editor.offsetToPos(tos - replacedText.length), editor.offsetToPos(tos));
        }
        else {
            let head = editor.getCursor("head");
            editor.setSelection(editor.offsetToPos(fos), head);
        }
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
function capitalizeWord(str) {
    var rx = new RegExp(LC + "\\S*", "g");
    return str.replace(rx, function (t) {
        return t.charAt(0).toUpperCase() + t.substr(1);
    });
}
function capitalizeSentence(s) {
    var rx = new RegExp("^" + LC + "|(?<=[\\.!?\\n~]\\s+)" + LC + "", "g");
    // return s.replace(/^\S|(?<=[\.!?\n~]\s+)\S/g, function (t) {
    return s.replace(rx, function (t) {
        return t.toUpperCase();
    });
}
const DEFAULT_SETTINGS = {
    MergeParagraph_Newlines: true,
    MergeParagraph_Spaces: true,
    LowercaseFirst: false,
};
class TextFormatSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h3", { text: "Lowercase" });
        new obsidian.Setting(containerEl)
            .setName("Lowercase before capitalize/title case")
            .setDesc("When running the capitalize or title case command, the plugin will lowercase the selection at first.")
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.LowercaseFirst)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.LowercaseFirst = value;
                yield this.plugin.saveSettings();
            }));
        });
        containerEl.createEl("h3", { text: "Merge broken paragraphs behavior" });
        new obsidian.Setting(containerEl)
            .setName("Remove redundant blank lines")
            .setDesc('change blank lines into single blank lines, e.g. "\\n\\n\\n" will be changed to "\\n\\n"')
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.MergeParagraph_Newlines)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.MergeParagraph_Newlines = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Remove redundant blank spaces")
            .setDesc("ensure only one space between words")
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.MergeParagraph_Spaces)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.MergeParagraph_Spaces = value;
                yield this.plugin.saveSettings();
            }));
        });
    }
}

module.exports = TextFormat;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
